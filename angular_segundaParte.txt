------------------------------------- Distintas formas de obtener datos de un form -------------------------------------
***********
@ViewChild
***********
1º En el input del html: (keyup.enter)="buscar( txtBuscar.value )" #txtBuscar
2º En el ts: 
	@ViewChild('txtBuscar') txtBuscar!: ElementRef<HTMLInputElement>;

  	buscar( termino: string ){    
    		const valor = console.log( this.txtBuscar.nativeElement.value );
    		console.log(valor);
    		this.txtBuscar.nativeElement.value = '';
  	}
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------- Service --------------------------------------------------------
Para usar un servicio hay que inyectarlo en la clase que queramos acceder a sus metodos: constructor(private gifsService: GifsService){}

//El servicio:
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class GifsService {

  private _historial: string[] = [];

  get historial() {
    return [...this._historial];
  }

  buscarGifs(query: string ){
    this._historial.unshift(query); //Lo inserta al inicio
    console.log(this._historial);
  }
}

//Para poder exportar por asi decir un array desde el service necesitamos usar el get:
	get historial() {
    		return [...this._historial];
  	}
//Se usa inyectando el servicio y this.gifsService.historial;
------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------- GIPHY API de giffs---------------------------------------------------------
https://developers.giphy.com/
1º Para consumir el api: 
	En el app.module.ts para usarlo de forma global o en el module que sea, importamos  HttpClientModule en imports, import { HttpClientModule } from '@angular/common/http';
	//Esto nos aportara un monton de servicios para poder consumir apis.
2º En el service que queramos usarlo lo inyectamos:
	constructor( private http: HttpClient ){}
3º Usamos el subscribe con el metodo de Observable para obtener los datos de la api:
	this.http.get(`https://api.giphy.com/v1/gifs/search?api_key=1enouhGe0CqHaOr1FNdJjpfWU44zoRCJ&q=${query} <&limit10`)
          .subscribe( ( resp: any ) => {
          	console.log( resp.data );
          	this.resultados = resp.data;
           });

4º Ahora tenemos que almacenar esos resultados para hacer algo con ellos, lo almacenamos en el servicio:
	public resultados: any[] = [];

5º Como lo manejamos desde un componente?¿ Pues obtenemos en el .ts  los datos del servicio:
	constructor( private gifsService: GifsService) { }
	get resultados(){
    		return this.gifsService.resultados;
  	}
6º Y en el html los manejamos:
	<div class="row">
    		<div *ngFor="let item of resultados" class="col-md-4 col-sm-6">
        		<div class="card">
            			<img [src]="item.images.downsized_medium.url" [alt]="item.title" class="card-img-top">
       		 	</div>
    		</div>
	</div>

7º Para ofrecer el tipado en vez de any podemos usar https://quicktype.io/ y con ello crear una interfaz y ponerle de ese tipo, para ello pegamos toda la respuesta que nos de la api en psotman por ejemplo en el json
y la pegamos a la izq, ponemos un nombre a la clase y luego a la derecha cambiamos el lenguaje a typeScript y copiamos el codigo y lo pegamos en una clase interface dentro de interface, gifs.interface.ts, SearchGifsResponse

8º Ahora podemos quitarle el any al resp y ponerle el tipo a el get de la nueva clase (no pasa nada si en la interfaz hay mucha roña, al hacer la trauccion a js y ser una interfaz la quita, asi que no incrementa el peso de la app):
	this.http.get<SearchGifsResponse>(`https://api.giphy.com/v1/gifs/search?api_key=1enouhGe0CqHaOr1FNdJjpfWU44zoRCJ&q=${query} <&limit10`)
        .subscribe( ( resp ) => {
          console.log( resp.data );
          this.resultados = resp.data;
        });
-------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------- Persistir informacion con Local Storage --------------------------------------------
//Se puede guardar informacion en el equipo o navegador local del usuario. 
1º Guardar en Local Storage, el metodo setItem requiere guardar en string y historial es un array, pero gracias al JSON.stringify podemos guardar objetos como si fueran strings:
	localStorage.setItem('historial', JSON.stringify( this._historial));

2º Si hace un refresh hay que reestablecer la informacion del historial local:
	//Comprobamos en el constructor si existe el localStorage y si existe, debemos transformar el objeto al que era con JSON.parse, para poder meterlo en this._historial como array, ya que lo habiamos transformado a String.
		constructor( private http: HttpClient ){
    			if(localStorage.getItem('historial')){
      				this._historial = JSON.parse(localStorage.getItem('historial')!) || [];
    			}    
  		}
-------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------- HttpParams -----------------------------------------------------------------
//Nos permite construir la url de una manera más sencilla.
	const params = new HttpParams().set('api_key',this.apiKeyGif)
                                       .set('limit','10')
                                       .set('q',query);
//Esto es igual a `https://api.giphy.com/v1/gifs/search?api_key=${this.apiKeyGif}&q=${query} <&limit10`

//Lo usamos de la siguiente manera: this.http.get<SearchGifsResponse>(`${this.apiUrl}/search`, { params })

//apiUrl es un string que contiene la url de la api -> private apiUrl: string = 'https://api.giphy.com/v1/gifs';
----------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------ Libreria animaciones ----------------------------------------------------------------
https://animate.style/
--------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------- Router Module ---------------------------------------------------------------------------------------
import { Component, NgModule } from '@angular/core';
import { Router, RouterModule, Routes } from '@angular/router';
import { PorPaisComponent } from './app/pais/pages/por-pais/por-pais.component';
import { PorRegionComponent } from './app/pais/pages/por-region/por-region.component';
import { PorCapitalComponent } from './app/pais/pages/por-capital/por-capital.component';
import { VerPaisComponent } from './app/pais/pages/ver-pais/ver-pais.component';

const routes: Routes =[
    {
        path: '',   //la ruta en la que cargara el componente
        component: PorPaisComponent,    
        pathMatch: 'full'   //Para que concuerde con la ruta de manera estricta, si no al ser '' vacio pillaria todo porque todo empieza por vacio
    },
    { path: 'region', component: PorRegionComponent},
    { path: 'capital', component: PorCapitalComponent},
    { path: 'pais/:id', component: VerPaisComponent },   //ruta dinamica segun el id
    { path: '**', redirectTo: ''}   //ruta por defecto al home si no se incluye ninguna de las anteriores
];

@NgModule({
    imports: [
        RouterModule.forRoot( routes )
    ],
    exports:[
        RouterModule
    ]
})
export class AppRoutingModule{

}

//Lo importamos en la clase html que sea con <router-outlet></router-outlet>
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------- RouterLink y RouterLinkActive  ----------------------------------------------------------------------
//Nos lleva a las rutas definididas en el routing.module.ts, tenemos que indicarla con el nombre que tengamos ahi.
	<li routerLink="capital" class="list-group-item">Por capital</li>

//RouterLinkActive es similar a meterle el active en html a una lista para que se quede marcado, solo que de esta manera se lo metera al que seleccionemos:
	routerLinkActive="active"	//En todos los li
//El router link tiene el inconveniente de que no pilla un pathmatch full, por lo tanto se lo debemos de indicar en los que sea necesario con el routerLinkActiveOptions, para que solo marque activo el que concuerde full con la ruta:
	<li routerLink="" routerLinkActive="active" [routerLinkActiveOptions]="{exact:true}" class="list-group-item">Buscar país</li>

//Si lo vamos a usar en un componente con un modulo externo (los modulos son como pequeñas burbujas, si hay que usar algo que requiera de impor, hay que importarlo aqui tb), hay que importar el Router Module:
	imports: [
    		CommonModule, 
    		RouterModule
  	]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------- Obtener datos del api rest-------------------------------------------------------------------------
buscarPais(termino: string): Observable<RESTCountriesResponse[]>{		//RESTCountriesResponse[] con [] porque queremos que regrese un arrego de pais no un pais
    const url = `${this.apiUrl}/name/${termino}`;
      return this.http.get<RESTCountriesResponse[]>(url);
  }

//Si queremos poner varias cosas dentro del next o error en varias lineas, con esta sintaxis, si no con la de abajo. Con data[0] obtenemos el primer valor.
this.paisService.buscarPais(this.termino)
      .subscribe({        
        next: (data) => {
          console.log('DATA', data)
          data[0].languages      
        },
        error: (_) => this.hayError = true
       });

//

this.paisService.buscarPais(this.termino)
      .subscribe({
        next: (data) => console.log('DATA', data),
        error: (_) => this.hayError = true
       });

//Rellenar una tabla con esos datos:
<tbody>
                <tr *ngFor="let item of paises; let i = index">   <!--let i = index para extraer un indice-->
                    <td> {{ i + 1 }}</td>
                    <td>
                        <img class="small-flag" [src]="item.flags.svg">
                    </td>
                    <td> {{ item.name.common }}</td>
                    <td> {{ item.population }}</td>
                    <td>
                       <a [routerLink]="['/pais', item.cca2]">Ver...</a>
                    </td>
                </tr>
            </tbody>
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------  Inputs y Output ---------------------------------------------------------------------------------------------
Output es del hijo al padre es donde se usa el EventEmitter, e input es del padre al hijo.

********
 Input
********
1º Podemos enviar informacion de un componente a otro, por ejemplo hacemos un @Input() del atributo con el mismo nombre que queramos importar(se llama paises en el otro componente):
	@Input() paises: RESTCountriesResponse[] = []
2º Y desde el html donde invocamos el componente <app-pais-tabla></app-pais-tabla> enviamos la informacion a donde esta recibiendo el input:
	<app-pais-tabla [paises]="paises"></app-pais-tabla>

*******
 Output
*******
1º Desde el hijo, es decir si queremos enviar algun dato al padre, el padre es el que invoca por ejemplo <app-input-tabla>
	import { EventEmitter } from '@angular/core';
	@Output() onEnter: EventEmitter<string>= new EventEmitter();

	termino: string = '';

	buscar(){
	    this.onEnter.emit( this.termino )		//Emitimos el termino que es un string que rellenamos desde el html al componente padre, para que lo gestione el.
  	}
2º Desde el componente padre:
	//En el html: 
		<app-pais-input (onEnter)="buscar( $event )"></app-pais-input><!--Escuchamos el evento onEnter y llamamos al metodo que esta en el padre, osea este y le mandamos el evento-->
	//En el service.ts recibimos el $event:
		  buscar( termino: string){
    			this.hayError = false;  
    			this.termino = termino;
    			console.log(this.termino);    
    			this.paisService.buscarPais(this.termino)
      				.subscribe({        
        				next: (data) => {
          					console.log('DATA', data);
          					this.paises = data; 
        				},
        				error: (_) => {
          					this.hayError = true;
          					this.paises = [];
        					}
       					});
  		}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------- DebounceTime  ---------------------------------------------------------------------------------------
//Se aconseja cuando se disparan busquedas cuando la persona escribe, de tal manera que retrasa la busqeuda de autocompletado al querer borrar algo para que no vaya aconsejando:
//El debouncer es una función como cualquier otra, pero su propósito es limitar la frecuencia con la que algún método o fragmento de código se ejecuta.
//¿De qué sirve? Pues ayuda a NO sobrecargar nuestras APIs con peticiones innecesarias o bien nuestros servicios, que generalmente son el origen de las peticiones al servidor.	

  @Output() onDebounce: EventEmitter<string>= new EventEmitter(); //Se va a emitir cuando la persona deja de escribir

  debouncer: Subject<string> = new Subject(); //Es un observable, que utilizare para ver cuando dejo de escribir

  ngOnInit(): void {
    this.debouncer
    .pipe(  //Para transformar la salida de este subscrime
      debounceTime(300)  //Cuantas milesimas de segundo puede esperar antes de emitir el valor
    )
    .subscribe(valor => {
      this.onDebounce.emit(valor);
    });
  }
  
  teclaPresionada(){
    this.debouncer.next( this.termino );
  }
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------  Escuchar cambios en url -----------------------------------------------------------------------------------------
this.activatedRoute.params
    .subscribe( ({id}) => {    //Observable para escuchar cambios en la ruta de este componente
      console.log( id );

      this.paiseService.getPaisPorCodigo( id )  //Nos subscribimos por que getPaisPorCodigo es un observable y asi obtenemos la información
      .subscribe( pais => {
        console.log(pais);
      });
    });
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------  SwitchMaps -----------------------------------------------------------------------------------------
//switchMap es un operador que recibe los parámetros del primer observable y los puedes utilizar para retornar otro observable utilizando esos params si es el caso.
//Es muy común usar el operador cuando tenemos observables en cadena, que se necesita se ejecute uno y luego otro. De esta manera, obtener solo una 1 respuesta en el subscribe.
//Si únicamente tienes un observable, simplemente utiliza subscribe y ya

ngOnInit(): void {

    this.activatedRoute.params
      .pipe(
        switchMap( ( param ) => this.paiseService.getPaisPorCodigo( param['id'] ))
      )
      .subscribe( resp  => {
        console.log( resp )
      });
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------- Colocar elemento html con if -------------------------------------------------------------------
<div *ngIf="!pais; else divPais" 
    class="alert alert-info">
    Espere por favor...
</div>

<ng-template #divPais>
    <div class="row">
        <div class="col-12">
            <h1>País:<small>{{ pais.name }}</small></h1>
        </div>
    </div>
</ng-template>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------- ngClass ------------------------------------------------------------------------------------------
//Si class.abc esta en true tendra la clase abc de stles
<button *ngFor="let item of regiones" class="btn btn-outline-primary "  [class.btn-primary]="loquesea === true" (click)="activarRegion(item)">

//Otra forma es con el ngClass, pero meh porque evalua las dos veces aunque se cumpla la primera condicion:
	[ngClass]="{
            'btn-primary': regionActiva === item,
            'btn-outline-primary': regionActiva !== item
        }" 
//Otra forma que solo evalua una vez:
	[class]=" (region ===regionActiva) ? 'btn btn-primary': 'btn btn-outline-primary'"
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------- Optimizaciones a peticiones HTTP ------------------------------------------------------------------------------------------
Ver lo del otro curso lo de httpParams, tengo apuntes de esto creo en en lo de api spring con angular creo
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------



