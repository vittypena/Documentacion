//Con postman podemos testear apis.

---------------------------------------------------------------------------------------------------- Conectar Angular con Spring ----------------------------------------------------------------
1º Anotamos en el controler de api con @CrossOrigin(origins = {"http://localhost:4200"}).

2º En angular en app.module.ts:
	Importamos -> import { HttpClientModule } from '@angular/common/http';
	En el imports: [ metemos -> HttpClientModule

3º En la clase de angular que vayamos a usar por ejemplo el list que tenemos en el api:
	Inyectamos HttpClient -> constructor(private http: HttpClient) { }
	Importamos -> import { HttpClient } from '@angular/common/http';

4º Para obtener el listado de ese api:
	Creamos la url de donde lo obtendremos -> private urlEndPoint: string = 'http://localhost:8080/api/clientes'
	Obtenemos el dato -> 
		getClientes(): Observable<Cliente[]>{ 
			return this.http.get<Cliente[]>(this.urlEndPoint);
		}
		//Lo convertimos en observable para convertilo en stream, que es como se trabaja desde datos API REST.
		//El <Cliente> es porque nos retorna un observable de tipo generico y tal y como lo tenemos en angular montado, necesitamos el tipo <Cliente>
	
	Obtenemos el dato forma 2 -> 
		getClientes(): Observable<Cliente[]>{
			return this.http.get(this.urlEndPoint).pipe(  //Se toma la respuesta que viene en un formato json en tipo de datos any y lo convertimos a un arreglo de Cliente[]
     				map( response => response as Cliente[]) 
    			);
		}

5º En donde queramos usar ese observable que obtenemos con el metodo GetClientes, lo debemos de pasar a tipo list para usarlo en la vista:
	ngOnInit(): void {					//this.clientes es tipo clientes!: Cliente[];
    		this.clienteService.getClientes().subscribe( 
      		clientes => this.clientes = clientes  
    		);
 	 }
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------- Rutas en angular, mapearlas --------------------------------------------------------------------------------
1º En app.module.ts ponemos las rutas:
	import { RouterModule, Routes } from '@angular/router';
	const routes: Routes = [ //Routing de todos los componentes, similar a @GetMapping
 		{path: '', redirectTo: '/clientes', pathMatch: 'full'},
  		{path: 'directivas', component: DirectivaComponent},
  		{path: 'clientes', component: ClientesComponent},
  		{path: 'clientes/form', component: FormComponent},
  		{path: 'clientes/form/:id', component: FormComponent}
	];
1bº Importamos en @NgModule en import -> RouterModule.forRoot(routes)  

2º Para cargas las vistas en el html, en vez de ir poniendo los componentes ponemos esta directiva especial:
	<router-outlet></router-outlet>

3º En el header html, invocamos la directiva asi: <a class="nav-link" aria-current="page" routerLink="/clientes">Clientes</a>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------- BACKEND API REST -------------------------------------------------------------------------------
//Al crear el proyecto seleccionamos DevTools, JPA, El de la BD que tengamos, y Web
@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
public class ClienteRestController {
	
	@Autowired
	private IClienteService clienteService;
	
	@GetMapping("/clientes")
	public List<Cliente> index(){		
		return clienteService.findAll();
	}
	
	@GetMapping("/clientes/{id}")
	public ResponseEntity<?> show(@PathVariable Long id) {		
		Cliente cliente = null;
		Map<String, Object> response = new HashMap<>();
		
		try {
			cliente = clienteService.findById(id);
		}catch (DataAccessException e ) {	
			response.put("mensaje", "Cliente ID:".concat(id.toString()).concat(" error al realizar la consulta en la BD"));
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}		
		
		if (cliente == null) {
			response.put("mensaje", "El cliente ID:".concat(id.toString()).concat(" no existe en la BD"));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}
		
		return new ResponseEntity<Cliente>(cliente, HttpStatus.OK);
	}
	
	@PostMapping("/clientes")
	public ResponseEntity<?> create(@RequestBody Cliente cliente) { //@RequestBody porque viene en formato JSon dentro de la petición
		Map<String, Object> response = new HashMap<>();
		Cliente clienteNew = null;
		
		try{
			clienteNew = clienteService.save(cliente);
		}catch(DataAccessException e) {
			response.put("mensaje", " error al realizar el insert en la BD");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}		
		
		response.put("mensaje", "El cliente ha sido creado con exito");
		response.put("cliente", clienteNew);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED);
	}	
	
	@PutMapping("/clientes/{id}")
	public ResponseEntity<?> update(@RequestBody Cliente cliente, @PathVariable Long id) {	//Recibe el cliente que queremos introducir por eso el @RequestBody, porque viene en formato Json		
		
		Map<String, Object> response = new HashMap<>();
		Cliente clienteActualizado = null;
		Cliente clienteActual = null;
		try {
			clienteActual = clienteService.findById(id);
		}catch (DataAccessException e ) {	
			response.put("mensaje", "Cliente ID:".concat(id.toString()).concat(" error al realizar la consulta en la BD"));
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
				
		if (clienteActual == null) {
			response.put("mensaje", "El cliente ID:".concat(id.toString()).concat(" no existe en la BD, por lo tanto no se puede editar"));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}
		
		clienteActual.setApellido(cliente.getApellido());
		clienteActual.setNombre(cliente.getNombre());
		clienteActual.setEmail(cliente.getEmail());		
		
		try {
			clienteActualizado = clienteService.save(clienteActual);			
		}catch (DataAccessException e ) {	
			response.put("mensaje", "Error, el cliente no se ha podido actualizar");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		response.put("mensaje", "El cliente ha sido actualizado con exito");
		response.put("cliente", clienteActualizado);
		//Tambien se actualiza con save, si el id es null hace un persist si el id no es null hace internamente un merge y actualiza
		return new ResponseEntity<Map<String,Object>>(response, HttpStatus.CREATED);
	}
	
	@DeleteMapping("/clientes/{id}")
	public ResponseEntity<?> eliminar(@PathVariable Long id) {
		Map<String, Object> response = new HashMap<>();
		try {
			clienteService.delete(id);
		}catch (DataAccessException e ) {	
			response.put("mensaje", "Error al eliminar el cliente en la BD");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		response.put("mensaje", "El cliente ha sido eliminado con exito");
		return new ResponseEntity<Map<String,Object>>(response, HttpStatus.OK);
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------				-------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------- Implementando en angular en back end-------------------------------------------------------------------------------------
Importamos en app.module.ts -> import { HttpClientModule } from '@angular/common/http';
Importamos en @NgModule en import: HttpClientModule.

1º En la clase service que queramos usarlo -> import { HttpClient, HttpHeaders } from '@angular/common/http';

2º Inyectamos la dependencia de HttpClient ->   constructor(private http: HttpClient, private router: Router) { } -> El router es de otra cosa.

3º Definimos la url del endpoint -> private urlEndPoint: string = 'http://localhost:8080/api/clientes'
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------- Validar form en el cliente---------------------------------------------------------------------------
//Ejemplo con campo nombre:
		<div class="col-sm-6">
                    <input type="text" class="form-control" [(ngModel)]="cliente.nombre" name="nombre" required		//ngModel consiste en una directiva que va a poblar
                        minlength="4" #nombre="ngModel">
                    <div class="alert alert-danger" *ngIf="nombre.invalid && (nombre.dirty || nombre.touched)">
                        <div *ngIf="nombre.errors?.['required']">
                            Nombre es requerido
                        </div>
                        <div *ngIf="nombre.errors?.['minlength']">
                            Nombre debe tener al menos 4 caracteres
                        </div>
                    </div>
                </div>

//Ejemplo con campo email:
	 	<div class="col-sm-6">
                    <input type="text" class="form-control" [(ngModel)]="cliente.email" name="email" required email
                        #email="ngModel">
                    <div class="alert alert-danger" *ngIf="email.invalid && (email.dirty || email.touched)">
                        <div *ngIf="email.errors?.['required']">
                            Email es requerido
                        </div>
                        <div *ngIf="email.errors?.['email']">
                            Email debe tener formato email@dominio
                        </div>
                    </div>
                </div>

//Deshabilitar boton crear mientras el formulario sea invalido:
	<form #clienteForm="ngForm">
	//Despues de marcar el form asi, lo comprobamos con el disabled:
	<button class="btn btn-primary" role="button" *ngIf="!cliente.id else elseBlock" [disabled]="!clienteForm.form.valid" (click)="create()">Crear</button>

//Podemos buscar apis validadores en https://angular.io/ si filtramos por validator.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------ Validar form desde el backend----------------------------------------------------------------------------------------------------
1º Agregamos la dependencia:
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

2º Anotamos en el entity con:
	@NotEmpty
	@NotEmpty(message = "no puede estar vacio")
	@Size(min=4, max =12)
	@Email

3º En el controlador antes de el metodo de crear por ejemplo anotamos con @Valid, para indicarle que se tiene que validar, sin esta anotacion a pesar de las reglas anteriores no se valida.

4º Inyectar en el controlador el objeto que contiene los mensajes de error, para saber si ocurrio algun problema en la validacion -> BindingResult result

5º Controlamos si hay erroes con un if y con el objeto metemos los errores en una lista:
	@PostMapping("/clientes")
	public ResponseEntity<?> create(@Valid @RequestBody Cliente cliente, BindingResult result) { //@RequestBody porque viene en formato JSon dentro de la petición
		Map<String, Object> response = new HashMap<>();
		Cliente clienteNew = null;
		
		if (result.hasErrors()) {
			List<String> errors = new ArrayList<>();
			for(FieldError err: result.getFieldErrors()) {
				errors.add("El campo " + err.getField() + " " + err.getDefaultMessage());
			}
			response.put("error", errors);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.BAD_REQUEST);
		}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------- Manejando esos erroes en angular -----------------------------------------------------------------------------------------------------------------------------------------
//Tenemos que capturar el error desde el metodo que se encarga en el cliente de recibir los errores para tratarlos, en este caso es el if que contiene el BAD_REQUEST:

	 update(cliente: Cliente): Observable<any>{
    		return this.http.put<any>(`${this.urlEndPoint}/${cliente.id}`, cliente, {headers: this.httpHeaders}).pipe(
      		catchError(e => {        
       		this.router.navigate(['/clientes']);
        	if(e.status==400){  //400 es BAD_REQUEST
          		return throwError(() => e);
        	}
        	console.error(e.error.mensaje);
        	swal.fire(e.error.mensaje, e.error.error, 'error')
        	return throwError(() => e);
      		})
    	    );
  	}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------ Transformar los datos del observable usando operador map y pipe ----------------------------------------------------------------------------------------------------------------------------
//Podemos formatear los datos de nuestro flujo (stream) con filtros (pipe) desde angular.
//Por ejemplo para visualizar el nombre de cliente en mayuscula o el formato de fecha.
//Se puede hacer con map a nivel de observable o con pipes.

*************
 Map
*************
Me da iwa, no me gusta

*************
 Pipe
*************
//Se aplican a variables que tenemos en las vistas, ademas es mejor segun el gachupino.
//En mayusculas por ejemplo -> <td>{{item.apellido | uppercase}}</td>     -> | uppercase y ya XDXD
//Fecha ->  <td>{{item.createAt | date:"EEEE dd, MMMM yyyy"}}</td>   
//Para cambiar el idioma de los pipes por decfecto tenemos que cambiar el LOCALE_ID global de la app:
1º En AppModulo añadimos el provider {provide: LOCALE_ID, useValue: 'es'}:
	providers: [ClienteService, {provide: LOCALE_ID, useValue: 'es'}],

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------- Uso del operador tao en Observable ---------------------------------------------------------------------------------------------------------------------------------
//Permite hacer operaciones sin cambiar el tipo de objeto, por ejemplo lo cambias para hacer esa operacion y luego fuera del tap es del tipo que estaba antes.
update(cliente: Cliente): Observable<any>{
    return this.http.put<any>(`${this.urlEndPoint}/${cliente.id}`, cliente, {headers: this.httpHeaders}).pipe(
      tap((response: Cliente[]) => {
        let clientes = response as Cliente[];
        clientes.forEach( cliente =>{
          console.log(cliente.nombre);
        }
          )
      }),
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------ Paginacion en angular --------------------------------------------------------------------------------------
1º Desde el BackEnd implementamos la interfaz Dao JpaRepository:
	public interface IClienteDao extends JpaRepository<Cliente, Long>{

	}

2º En la interfaz servicio implementamos el metodo :
	import org.springframework.data.domain.Pageable;
	public Page<Cliente> findAll(Pageable pageable);

3º En el serviceimpl implementamos el metodo:
	@Override
	public Page<Cliente> findAll(Pageable pageable) {
		return clienteDao.findAll(pageable);		
	}

4º Desde el rest controller implementamos el metodo con la ruta mapeada que devuelve el page:
	@GetMapping("/clientes/page/{page}")
	public Page<Cliente> index(@PathVariable Integer page){		
		return clienteService.findAll(PageRequest.of(page, 4));
	}

5º Desde el lado del cliente angular hay que moficiar cliente.service.ts:
	getClientes(page:number): Observable<any> { 
    		return this.http.get(this.urlEndPoint + '/page/' + page).pipe(
      			map((response: any) => {
        			(response.content as Cliente[])
        			return response;
      			})
    		)  
  	}

6º En el cliente.component.ts, hay que pasar el numero d epagina al metodo getClientes:
 export class ClientesComponent implements OnInit {

  clientes!: Cliente[];  
  paginador:any;

  constructor(private clienteService: ClienteService, private activatedRoute: ActivatedRoute) { }//Se define el atributo y a su vez de inyecta

  ngOnInit(): void {     
    this.activatedRoute.paramMap.subscribe( params => {   
      let page:number = +params.get('page')! | 0; //Lo convierte a string y si no hay parametro lo pone en 0 por defecto.
      this.clienteService.getClientes(page).subscribe(  //Get cliente es un observable, va a ser observado por observadores, entonces tenemos que subscribirlo
        response => {
          this.clientes = response.content as Cliente[]  //Pasamos el stream a this.clientes
          this.paginador = response;
        }
      );
    }
    );
 }

7º Agregamos la ruta del paginador en el app.module.ts para poder ir cambiando de paginas:
	{path: 'clientes/page/:page', component: ClientesComponent}

8º Ahora en el cliente.component.ts hay que cambiar el let page = 0, inyecto el parametro activated route, importandolo desde import { ActivatedRoute } from '@angular/router';, para poder ver la ruta que corresponde e ir cambiando la pagina:
	constructor(private clienteService: ClienteService, private activatedRoute: ActivatedRoute) { }

9º Creamos el componente paginador, de tal manera que con links vayamos cambiando la ruta del page, lo colocamos en el el componente que queramos mostrarlo: <paginator-nav *ngIf="paginador" [paginador] = "paginador"></paginator-nav>

//paginator.component.html:
	<ul *ngIf="paginas!.length > 0" class="pagination">
    		<li *ngFor="let numeroPagina of paginas">
        		<a [routerLink]="['/clientes/page', numeroPagina-1]">{{ numeroPagina }}</a>
    		</li>
	</ul>	
//paginator.component.ts:
	@Component({
  		selector: 'paginator-nav',
  		templateUrl: './paginator.component.html'
	})
	export class PaginatorComponent implements OnInit {

  		@Input()
  		paginador: any;

  		paginas!: number[];

  		constructor() { }

  		ngOnInit(): void {
    		  this.paginas = new Array(this.paginador.totalPages).fill(0).map((_valor, indice) => indice + 1);
  		}

	}

 *****************************
* [ Dar estilo al paginador ] *
 *****************************
<ul *ngIf="paginas!.length > 0" class="pagination">
    <li href="page-item" *ngIf="paginador.number > 0">
        <a class="page-link" [routerLink]="['/clientes/page', paginador.number-1]">&laquo;</a>
    </li>

    <li [ngClass]="paginador.first?'disabled page-item': 'page-item'">
        <a [routerLink]="['/clientes/page', 0]" class="page-link">Primera</a>
    </li>

    <li *ngFor="let numeroPagina of paginas" class="page-item" [ngClass]="numeroPagina-1 == paginador.number? 'active':''">
        <span *ngIf="numeroPagina-1 == paginador.number" class="page-link">{{numeroPagina}}</span>  <!--Si estamos en la misma pagina deshabilitamos ese boton-->
        <a *ngIf="numeroPagina-1 != paginador.number" [routerLink]="['/clientes/page', numeroPagina-1]" class="page-link">{{ numeroPagina }}</a>
    </li>

    <li [ngClass]="paginador.last?'disabled page-item': 'page-item'">
        <a [routerLink]="['/clientes/page', paginador.totalPages-1]" class="page-link">Ultima</a>
    </li>

    <li href="page-item" *ngIf="paginador.number < paginador.totalPages-1">
        <a class="page-link" [routerLink]="['/clientes/page', paginador.number+1]">&raquo;</a>
    </li>          
</ul>

********************************************
* OverFlow en paginador con muchas paginas *
********************************************
//Para solucionar esto podemos -> <ul *ngIf="paginas!.length > 0" class="pagination" style="overflow:scroll"> -> o trabajar con rangos, que es lo ideal.
	export class PaginatorComponent implements OnChanges {

  		@Input()
  		paginador: any;

 		paginas!: number[];

  		desde?: number | any;
  		hasta?:number;
  		constructor() { }
  		ngOnChanges(changes: SimpleChanges): void {
    			throw new Error('Method not implemented.');
  		}

  		ngOnChanges(changes: SimpleChanges): void {
    			this.desde = Math.min( Math.max(1, this.paginador.number-4),this.paginador.totalPages-6);
    			this.hasta = Math.max( Math.min(this.paginador.totalPages, this.paginador.number+4), 6);

    			if(this.paginador.totalPages>5){
      				this.paginas = new Array(this.hasta - this.desde + 1).fill(0).map((_valor, indice) => indice + this.desde);
    			}else{
      				this.paginas = new Array(this.paginador.totalPages).fill(0).map((_valor, indice) => indice + 1);
    			}    
  		}

	}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------ Angular material DatePicker ----------------------------------------------------------------------------------
Fuente de angular material -> https://material.angular.io/
Instalamos angular material en el proyecto: ng add @angular/material
Realizamos los import necesarios.
Instalamos npm install --save moment y npm install --save @angular/material-moment-adapter
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------- Upload BackEnd ----------------------------------------------------------------------------------------------
1º Mapeamos en el api rest el metodo encargado del upload, previamente en en el entity lo hemos metido como un string.	
	@PostMapping("/clientes/upload")
	public ResponseEntity<?> upload(@RequestParam("archivo") MultipartFile archivo, @RequestParam("id") Long id){
		Map<String, Object> response = new HashMap<>();
		
		Cliente cliente = clienteService.findById(id);
		
		if(!archivo.isEmpty()) {
			String nombreArchivo = UUID.randomUUID().toString() + archivo.getOriginalFilename().replace(" ", "");
			Path rutaArchivo = Paths.get("uploads").resolve(nombreArchivo).toAbsolutePath();	
			
			try {
				Files.copy(archivo.getInputStream(), rutaArchivo);	//Copia el archivo subido al servidor a la ruta escogida
			} catch (IOException e) {
				response.put("mensaje", "Error al subir la imagen del cliente " + nombreArchivo);
				response.put("error", e.getMessage().concat(":").concat(e.getCause().getMessage()));
				return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			}
			
		String nombreFotoanterior = cliente.getFoto();
			
		if(nombreFotoanterior != null && nombreFotoanterior.length() > 0) {
			Path rutaFotoAnterior = Paths.get("uploads").resolve(nombreFotoanterior).toAbsolutePath();
			File archivoFotoAnterior = rutaFotoAnterior.toFile();
			if(archivoFotoAnterior.exists() && archivoFotoAnterior.canRead()) {
				archivoFotoAnterior.delete();
			}
		}
			
		cliente.setFoto(nombreArchivo);
			
		clienteService.save(cliente);
			
		response.put("cliente", cliente);
		response.put("mensaje", "Has subido correctamente la imagen: " + nombreArchivo);
	}

2º Creamos la carpeta uploads en el proyecto, en la raiz mismo

3º En el application.properties aumentamos el tamaño de archivo maximo:
	spring.servlet.multipart.max-file-size=10MB
	spring.servlet.multipart.max-request-size=10MB

4º Añadir metodo handler para mostrar la imagen:
	@GetMapping("/uploads/img/{nombreFoto:.+}")// nombreFoto:.+ significa que va a tener una extensión.
	public ResponseEntity<Resource> verFoto(@PathVariable String nombreFoto){
		Path rutaArchivo = Paths.get("uploads").resolve(nombreFoto).toAbsolutePath();
		
		Resource recurso = null;
		
		try {
			recurso = new UrlResource(rutaArchivo.toUri());
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
		
		if(!recurso.exists() && !recurso.isReadable()) {
			throw new RuntimeException("Error no se pudo cargar la imagen: " + nombreFoto);
		}
		
		HttpHeaders cabecera = new HttpHeaders();
		cabecera.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + recurso.getFilename() + "\"" );		
		
		return new ResponseEntity<Resource>(recurso, cabecera,  HttpStatus.OK);
	}

****************
 Desde Front
****************

Creamos el componente detalle: ng g c detalle.

//La clase detalle.component.ts:
      export class DetalleComponent implements OnInit {

  	cliente?: Cliente;

  	constructor(private clienteService: ClienteService, private activatedRote: ActivatedRoute) { }//ActivatedRoute permite identificar cuando cambia el parametro id.

  	ngOnInit(): void {
    		this.activatedRote.paramMap.subscribe(params =>{//Subcribir cuando cambia el id para poder obtener el parametro del cliente
      		let id: number = +params.get('id')!;//Obtenemos el parametro id
      		if(id){
        		this.clienteService.getCliente(id).subscribe(cliente => { //obtenemos el objeto cliente con ese id y se lo pasamos a nuestro cliente.
          		this.cliente = cliente;
        	})
      	       }
    	}
    	);
      }

//La clase detalle.component.html:
	<div class="card bg-dark text-white">
   	<div class="card-header">{{titulo}}</div>
    		<div class="card-body">
        		<div class="input-group">
            			<input type="file" class="form-control" id="inputGroupFile04" aria-describedby="inputGroupFileAddon04" aria-label="Upload">
            			<button class="btn btn-outline-secondary" type="button" id="inputGroupFileAddon04">Subir foto</button>
          		</div>
    		</div>
	</div>

6º Añadimos la ruta en app.module.ts -> {path: 'clientes/verimg/:id', component: DetalleComponent} y añadimos el boton en clientes.component.html -> <button type="button" [routerLink]="['/clientes/verimg', item.id]" class="btn btn-success">{{item.id}}</button>

*****************************
Subir archivo desde el Front
*****************************
1º En la clase cliente service implementamos el metodo que contectara con el back:
	subirFoto(archivo: File , id: string | Blob): Observable<Cliente>{
    
    		let formData = new FormData();
    		formData.append("archivo", archivo); //
    		formData.append("id", id);
    		return this.http.post(`${this.urlEndPoint}/upload/`, formData).pipe(
      			map( (response: any) => response.cliente as Cliente),
      			catchError( e=> {
        			this.router.navigate(['/clientes']);
        			console.error(e.error.mensaje);
        			swal.fire(e.error.mensaje, e.error.error, 'error')
        			return throwError(() => e);
      			})
    		);
  	}
2º Implementamos en el html en el input File de foto el evento change que es similar al onChange y el evento subirFoto en el boton():
	<input (change)="seleccionarFoto($event)" type="file" class="form-control" id="inputGroupFile04" aria-describedby="inputGroupFileAddon04" aria-label="Upload">
	<button (click)="subirFoto()" class="btn btn-outline-secondary" type="button" id="inputGroupFileAddon04">Subir foto</button>

3º Implementamos el metodo seleccionarFoto() y subirFoto():
	seleccionarFoto(event: any){
    		this.fotoSeleccionada = event.target.files[0];
    		console.log(this.fotoSeleccionada);
  	}

	subirFoto(){
    		this.clienteService.subirFoto(this.fotoSeleccionada, this.cliente?.id).subscribe(cliente => {
      		this.cliente = cliente;
    		});
  	}

4º Creamos la clase detalle.component.html para la vista:
	<div class="card bg-dark text-white">
    		<div class="card-header">{{titulo}}</div>

    		<div class="card-body">
        		<div class="container">
            			<div class="row">
                			<div class="col-sm">
                    				<ul class="list-group text-dark mb-3" *ngIf="cliente">
                        				<li class="list-group-item active">{{cliente.nombre}}</li>
                        				<li class="list-group-item">{{cliente.apellido}}</li>
                        				<li class="list-group-item">{{cliente.email}}</li>
                        				<li class="list-group-item">{{cliente.createAt | date: "fullDate"}}</li>
                    				</ul>

                    			<div class="input-group">
                        			<div class="custom-file">
                            				<input (change)="seleccionarFoto($event)" type="file" class="form-control" id="inputGroupFile04" aria-describedby="inputGroupFileAddon04" aria-label="Upload">
                            				<label class="custom-file-label" for="inputGroupFile04">Seleccionar Foto</label>
                       	 			</div>
                        		<div class="input-group-append">
                            			<button (click)="subirFoto()" class="btn btn-outline-secondary" type="button" id="inputGroupFileAddon04">Subir foto</button>
                        		</div>
                  		</div>
                	</div>
                	<div class="col-sm">
                    		<img *ngIf="cliente?.foto" src="http://localhost:8080/api/uploads/img/{{cliente.foto}}" alt="{{cliente.foto}}" class="img-thumbail rounded">
                	</div>
            	</div>
       	</div>            
    </div>
</div>

5º Validamos la imagen antes de subirla para que no sea un .doc por ejemplo:
	seleccionarFoto(event: any){
    		this.fotoSeleccionada = event.target.files[0];

	subirFoto(){
    		if(!this.fotoSeleccionada){
6º Realizar barra de progreso:
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------- Agregando campo select en el formulario -----------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------