
--------------------Playground--------------------------
Archivo tipo playground -> Es un archivo dnd escribir codigo y ver el resultado inmediatamente sin crear proyecto complejos.
Para crearlo creamos un proyecto normal y como si fuese un .java le damos a la carpaeta del proyecto boton derecho crear new file y abajo del todo playgroundblanc.
Para ejecutarlo clic en el play.
--------------------------------------------------------

-----------------Comentarios---------------------
//Comentario en linea
/*
Comentario en varias
lineas.
*/
-------------------------------------------------

-----------------Variables-----------------------
var nombre = "Hello, playground"

#Variable constante:
let sConstante = "variable final"

#Declarar varias variables de golpe:
let variable1 = "1", variable2 = 0, variable3 = "cinco"

#Sumar double e int, (casteando):
var suma = Double(xInt) + y

#Declarar tipo de dato sin que lo haga automaticamente swift:
var x:Int = 20

#String en varias lineas:
let myMultipleString = """
Esto es un string
en varias lineas
"""

#Caracteres unicode Unicode, por ejemplo el 59:
let myCaracter = "\u{59}"

#Emojis
let myEmoji = "\u{1F496}"

#Interpolar String:
let interpolarString = "Mi nombre es: \(nombrevariable) y vivo en \(ciudadvariable)

#Comparar String:
name1 == name2
name1 != name2

#String que contiene...:
variableString.contains(name1)

#Recorrer String caracter a caracter:
for valor in variable{
	print(valor)
}
-------------------------------------------------

---------------Colecciones-----------------------
Los tipos de colecciones son: Arreglos, Set(unicos y ordenados), diccionarios(clave-valor)

Arreglos, mutable e inmutable(que no se pueda modificar):*******
var arregloNumeros = [1,2,3]
let arregloNumeroInmutable = [3,2,1]
print(arregloNumeros[1])
arregloNumeros.append(5)	#Agregar al final
arregloNumeros.insert(4, at:3)	#Agrega el elemento 4 en la posicion 3
//Eliminar valores
arregloNumeros.removeLast()
arregloNumeros.remove(at:3)	#Elimina el valor de la posicion 3
//Eliminar todo el arreglo
arregloNumeros.removeAll()
//Inicializar arreglo de tipo Int por ejemplo:
var arregloVacio:[Int] = []
****************

Diccionarios**************
//Declararlos:
let myClassicDictionary = Dictionary<Int, String>()
var myModernDictionary = [Int:String]()			#Int->Clave, String->Valor, ambas formar son validas, la de abajo es más actual
//Añadir datos al diccionario:
myModernDictionary = [001:"Juan", 002:"Brais"]
//Añadir un solo dato:
myModernDictionary[003] = "Ana"
//Acceso a un dato
myModernDictionary[002]
/Borrar un dato
myModernDictionary[002] = nil
****************

Tuplas**********
//Las tuplas pueden tener diferentes tipos de datos
//Declarar tupla
var persona = ("Juan", "Villalvazo", 30, 1.86)
//Acceder a un dato
persona.0
//Declarar tupla con clave:
var persona = (nombre:"Juan", apellido:"Villalvazo", edad:30, estatura:1.86)
************************
-------------------------------------------------

---------------- Sets----------------------------
//Coleccion, valores de un unico tipo, no ordenados pero si que no podran estar repetidos.
// Similar a arrays. Conjuntos, colecciones, no estan ordenados y no pueden ser repetidos

//Sin datos
var mySet = Set<String>()

//Con datos
let mySet2 : Set<String> = ["Brais", "More", "Pena"]

//Insercion de uno en uno
mySet.insert("Vitty")
mySet.insert("32")
print(mySet)

//Acceso
if mySet.contains("Vitty"){
    print("Existe")
}else{
    print("No existe")
}

//Remover
mySet.remove("32")
print(mySet)

//Si el primer indice es...
if let index = mySet.firstIndex(of: "Vitty"){
    mySet.remove(at: index)
}
print(index)

//Como iterar Sets
mySet.insert("Vitty")
mySet.insert("32")
for myElement in mySet{
    print(myElement)
}

//Operaciones de conjunto**************
let myIntSet: Set = [1,2,3,4,5]
let myIntSet2: Set = [1,2,3,4,5]
//Interseccion crear un nuevo conjunto con los valores comunes entre ambos
print(myIntSet.interseccion(myIntSet2))
//Diferencia asimetrica, lo mismo pero con valores no comunes
print(myIntSet.symmetricDifference(myIntSet2))
//Union sin estar repetidos
print(myIntSet.union(myIntSet2))
//Sustraccion, los valores que tenga en comun con el primero los elimina
print(myIntSet.subtracting(myIntSet2))

//Ordenar Colecciones*******************************
var myArray = [5, 8 ,1, 0, 3, 9, 7, 2, 4, 6]

//myDictionary.sort() No soportado
var myDictionary = [    
    5:"Cinco",
    8:"Ocho",
    1:"Uno",
    0:"Cero",
    3:"Tres"
]

var mySet: Set = [5,8,1,0,3,9,7,2,4,6]  //mySet.sort() No soportado

//Ordenarlos
myArray.sort()
print(myArray)
//Ordenar bajo criterio, por ejemplo de mayor a menor
myArray.sort{ (intA, intB) -> Bool in
    return intA > intB
}

//Para ordenar en los 3 tipos de colecciones necesitamos sorted, nos devuelve una nueva ya ordenada
var myArraySorted = myArray.sorted 
print(myArraySorted)

myArraySorted = myArray.sorted{ (intA, intB) -> Bool in
    return intA > intB
}

let mySortedDictionary = myDictionary.sorted { (elementA, elementb) -> Bool in
    return elementA.key < elementB.key
}

var mySortedSet = mySet.sorted { (intA, intB) -> Bool in
    return intA > intB
}

//Hacer transformaciones a los arrays
//Por ejemplo sumar 10 a todos los valores mediante mapeo (map)
var myMapArray = myArray.map{(myInt) -> Int in
    return myInt + 10
}

let myStringMapArray = myArray.map{(myString) -> String in
    return "Este es el numero \(myInt)"
}
print(myMapArray)

let myIntMapArray = myDictionary.map{ (myElement) -> Int in
    return myElement.key
}
//**************************************************

//For each para iterar******************
    myArray.forEach{(myInt) in
    print(myInt)
    }
//**************
-------------------------------------------------

----------------Enumeracion----------------------
Agrupar diferentes valores por numero para evitar errores:
//Sintaxis Enumeración
enum PersonalData{
    case name
    case surname
    case address
    case phone
}
//Editar valores 
var currentData: PersonalData = .name
var input = "Brais"
currentData = .phone
input = "666666666"

//o

//Enumeraciones con valores asicioados
enum ComplexPersonalData{
    case name(String)
    case surname(String, String)
    case address(String, Int)
    case phone(Int)
}
//Editar datos
var complexCurrentData: ComplexPersonalData = .name("Brais")
var complexCurrentData = .address("Calle Test", 5)

//o

//Enum con el mismo tipo de valor
enum RawPersoonalData: String{
    case name = "Nombre"
    case surname = "Apellidos"
    case address = "Direccion"
    case phone = "Numero de telefono"
}
//Acceder al valor
RawPersoonalData.phone.rawValue
-------------------------------------------------

-------------Range Operator---------------
//Sirve para pillar un rango en un arreglo
var arregloEjemplo = [0,1,2,3,4,5,6,7,8,9]
var subsetArreglo = arregloEjemplo[1..3]	#Pilla del 1 al 3
var subSetaArreglo2 = arregloEjemplo[...3]	#Pilla del 0 al 3
var subSetaArreglo3 = arregloEjemplo[5...]	#Pilla del 5 al 0
//Crear un array con un rango sin tener que poner muchos numeros, array rango:
var rangoCerrado = [1...5]
var subArray = Array(rangoCerrado[0])
------------------------------------------

-----------------Condicionales--------------------
if***********
//Se pueden poner parentesis
var edad = 17
var cantidadDinero = 1000
var sexoFemenino = false
if edad < 20  || cantidadDinero > 250{
    print("Es verdadero")
}else {
    print("No lo tienes")
}

if !((edad < 20  || cantidadDinero > 250) && (sexoFemenino)){
    print("Es verdadero")
}else {
    print("No lo tienes")
}
**********************

switch*************
let country = "ES"
switch country {
case "ES":
    print("El idioma es Español")
case "AR":
    print("El idioma es Español")
case "PE":
    print("El idioma es Español")
case "ME":
    print("El idioma es Español")    
case "FR"
    print("El idioma es Frances")
default:
    print("El idioma es Ingles")
}


let age = 20
switch country {
case 0,1,2:
    print("Eres un bebe")
case 3...10:
    print("Eres un niño")
case 11..<16:
    print("Eres un adolescente")
default:
    print("El idioma es Ingles")
}

//Switch con Enum
enum PersonalData {
    case name
    case surname
    case address
    case phone
}
let userData: PersonalData = .name
switch userData {
  case .name:
    print("Estamos editando el nombre")
  case .surname:
    print("Estamos editando el surname")
  case .address:
    print("Estamos editando el address")
  case.phone:  
    print("Estamos editando el phone")
}
**********************
--------------------------------------------------

-----------------------Bucles---------------------
for in, while y repeat while
//For each
for in*************
//For in con rango:
var contadora = 0
for numero in 1...4 {
    contadora += 1
    print(numero)
}

//For in con variable:
var paises = ["MX", "EUA", "JP"]
for pais in paises {
    print(pais)
}

//For in con diccionario clave valor
var paises = ["MX":"Mexico", "EUA":"Estados Unidos", "JP":"Japon"]
for (pais, significado) in paises {
    print(" \(pais) --- \(significado) ")			#Recordar que \(variable) es para escapar en un string
}
*******************

while***********
var age = 10
while age < 18 {
    print("Eres menor de edad. Te faltan \(18 - age) años")
    age += 1
}

*********************
//Do while
repeat while************
var numeros = [1,2,3,4,5,6,7,8,8,9,10]
var i = numeros.count -1
repeat {
    numeros.remove(at:i)
    i = numeros.count -1
} while (numeros.count > 0)

var numeroAleatorio:Int
var n = 0
repeat {
    n += 1
    numeroAleatorio = Int(arc4random_uniform(10) #Numero aleatorio numero aleatorio del 0 al 10)
    print("El ciclo lleva \(n) cantidad de iteraciones")
} while (numeroAleatorio != 8)
************************
--------------------------------------------------

-------------------Funciones-----------------------
//Declararla***********
func holaMundo(){
    print("Hola Mundo")
}
//Llamarla
holaMundo()

//Funcion con parametro***********
func cuadradoDeNumero(numero:Int){
    var numeroCuadrado = x * x
    print(numeroCuadrado)
}
cuadradoDeNumero(numero:5)

//Funcion con valor de retorno ***********
func cuboDe(numero:Int) -> Int{
    let numeroCubo = numero * numero * numero

    return numeroCubo
}
print(cuboDe(numero:3))

//Funcion con multiples parametros*************
func saludarAlumno(nombre:String, mensaje:String){
    print("Hola \(nombre) \(mensaje)")
}
saludarAlumno(nombre:"Maria", mensaje: "Hola que tal")

//Funcion con valores por default**************
func saludarDefecto(nombre:String, mensaje:String = "Que tal"){
    print("Hola \(nombre) \(mensaje)")
}
saludarDefecto(nombre:"Pedro")

//Funcion con multiple retorno**********
func listaNombres() -> [String]{
    let arregloNombres = ["Jose", "Maria", "Morelos"]
    return arregloNombres
}
var nombres = listaNombres()
print(nombres)

//Funcion con parametros de Nombres Externos, sirve para poner un nombre al parametro y hacerlo más descriptivo (mehh)
func calificacionPromedio(matematicas materiaUno:Double, fisica materiaDos:Double,quimica  materiaTres:Double) -> Double{
    return (materiaUno+materiaDos+materiaTres)/3
}
let miCalificacion = calificacionPromedio(matematicas:81, fisica:45, quimica:60)
print(miCalificacion)

//Clousures********* Como las funciones pero es una variable que guarda un bloque de codigo
/*
{
    (parametros) -> tipo-valor-retorno in
    codigo
}
*/
let miPrimerClousure = {
(materiaUno:Double, materiaDos:Double, materiaTres:Double) -> Double in
    return (materiaUno+materiaDos+materiaTres)/3
}
print(miPrimerClousure(100, 22, 88))
---------------------------------------------------

---------------- Programacion Orientada a Objetos-------------------------------
//Estructuras**************
//Declararla
//Estructura
struct cuadrados {
    var ancho = 10
    var alto = 10

    func area() -> Int{
        return ancho * alto
    }
}
//Utilizarla
var miCuadrado = cuadrados()
var areaCuadrado = miCuadrado.area()
***************************************

//Clases**********
class automovil{
    var color = "neutro"
    var numeroLlantas = 4
    var precio = 0
    func encender() -> Bool{
        return true
    }
    func apagar() -> Bool{
        return true
    }
    func acelerar() -> Bool{
        return true
    }
}
//Instanciarlo
var miObjetoMazda = automovil()
//Asignar valores
miObjetoMazda.precio = 500
print(miObjetoMazda.precio)
*************************************
//La clase al crear copias de la instancia, referencia a la otra, es decir los cambios se aplican a la copia de esa instancia y el otro(estructuras no referencia a esa copia, los cambios no afectan al original)
**************************************************
--------------------------------------------------------------------------------

-----------Opcionales---------------------
//Pasar a int desde string
let myStringNumber = "100"
let myIntNumber = Int(myStringNumber) 	//Transformar a int

//Transformar a int de manera opcional, es decir si se puede mediante variable: Int?
let mywrongStringNumber = "Brais"
let myWrongIntNumber: Int? = Int(myWrongStringNumber)

//Declarar variable como posible nulo
var myOptionalString: String?
print(myOptionalString)

//Comprobar si es nulo
if myOptionalString != nil{
    print("No es nulo")
}else {
    print("Es nulo")
}

//Desempaquetado forzado, esto significa que con esto evitaremos el error de que es nulo, porque aunque en un principio sea nulo, le estamos diciendo que en este punto no va a ser nulo
print(myOptionalString!)

//Guard let************
//Salida rapida guard let, sirve para desempaquetar valores no nulos pero lo que va  aproducir es salida rapida, es decir exigir que una condicion sea verdadera para que se ejecute el dcodigo siguiente y si no parar el programa
//Debe estar dentro de una funcion, para en caso de no funcionar, escapar de la funcion con el return
var myOptionalString: String?

func myFunction(){
    guard let myString = myOptionalString else{
        return
    }
    print("El valor de myString es \(myString)")    
}

myFunction()
myOptionalString = "Mehh"
myFunction()
***********************

//Manejo de errores try catch************
func sum(firstNumber: Int?, secondNumber: Int?) throws -> Int {
    if firstNumber == nil{
        throw SumError.firstNumberNil
    }else if secondNumber == nil{
        throw SumError.secondNumberNil
    }else if firstNumber! < 0 || secondNumber! < 0{
        throw SumError.numberNegative(firstNumber: firstNumber!, secondNumber: secondNumber!)
    }
    return firstNumber! + secondNumber!
}

//Definicion de tipos de errores, para capturarlos, los invocamos en la funcion de arriba
enum SumError: Error{
    case firstNumberNil
    case secondNumberNil
    case numberNegative(firstNumber: Int, secondNumber: Int)
}
//Propagacion de errores, lo intentamos mediante el uso de do try
do{
print(try sum(firstNumber: 4, secondNumber: -50))
}catch SumError.firstNumberNil{
    print("El primer numero es nulo")
}catch SumError.secondNumberNil{
    print("El segundo numero es nulo")
}catch SumError.numberNegative(let firstNumber, let secondNumber){
    print("Hay algun numero negativo \(firstNumber), \(secondNumber)")
}
*****************************************

//Type casting*************
//Type casting (validacion de tipos de dato)
let myString = "Brais"
let myInt = 32

class Myclass{
    var name: String!
    var age: Int!
}

let myClass = Myclass()
myClass.name = "Brais Moure"
myClass.age = 32

//Con un array de tipo de dato any podemos introducir cualquier dato dentro, array con todo
let myArray: [Any] = [myString, myInt, myClass]

//Comprobar que tipo de dato es
for item in myArray{
    //Type casting 
    if item is String{
        //Downcasting, que viene a ser transformar un tipo de dato a otro más restringido, hay que obligar con ! a que sea de tipo String para hacer el cast
        let myItemString = item as! String
        print("Item es de tipo String y tiene el valor \(myItemString)")
    }else if item is Int{
        let myItemInt = item as! Int
        print("Item es de tipo Int y tiene el valor \(myItemInt)")
    }else if item is Myclass{
        let myItemMyclass = item as! Myclass
        print("Item es de tipo Myclass y tiene el valor \(myItemMyclass.name!) y \(myItemMyclass.age!)")
    }
}
//Lo mismo pero más corto
for item in myArray{
    if let myItemString = item as? String{
        print("Item es de tipo String y tiene el valor \(myItemString)")
    }else if let myItemInt = item as? Int{
        print("Item es de tipo Int y tiene el valor \(myItemInt)")
    }else if let myItemMyclass = item as? Myclass{
        print("Item es de tipo Myclass y tiene el valor \(myItemMyclass.name!) y \(myItemMyclass.age!)")
    }
}
*******************************
-----------------------------------------------

---------------Extensiones--------------------
//Es una caracteristica de swift para agregar funcionalidades a una clase, estructura, tipo de dato o protocolo existente.
let myMeters: Double = 5

func metersToKm(meters: Double) -> Double{
    return meters / 1000
}

print(metersToKm(meters: myMeters))

//Como crear extensiones para añadir nueva funcionalidad a un tipo de dato,  en este caso serviria para cualquier tipo double del archivo
extension Double{
    var km: Double{
        return self / 1000
    }

    var m:Double{
        return self
    }

    var cm:Double{
        return self * 100
    }
}

print(myMeters.km)
----------------------------------------------

-------------Protocolos-----------------------
//Un protocolo va a obligar a una estructura a que adopte una serie de propiedades o funciones, es como los metodos abstractos.
//Protocolos, de esta manera estamos obligando a que si colocamos el protocolo en una estructura o clase se añada lo que hay en el protocolo
protocol PersonProtocol {
    //De esta forma vamos a poder obtener el valor de la propiedad y tambien leerlo
    var name: String{ get set}
    var age: Int{ get set}    
    func fullName() -> String
}

//Añadir el protocolo a la estructura
struct Programmer: PersonProtocol{
    var language: String
    var name: String
    var age: Int
    func fullName() -> String{
        return "El nombre es \(name), edad : \(age), y escribe en\(language)"
    }
}

struct Teacher: PersonProtocol{
    var subject: String
    var name: String
    var age: Int
    func fullName() -> String{
        return "El nombre es \(name), edad : \(age), y da \(subject)"
    }
}

let myProgrammer = Programmer(language: "Swift", name: "Brais", age: 32)
let myTeacher = Teacher(subject: "Matematicas", name:"Juan", age: 50)
print( myProgrammer.fullName() )
print( myTeacher.fullName() )
----------------------------------------------

----------Genericos-----------------
//Un codigo generico nos va a permitir escribir funciones reutilizables. Por ejemplo una funcion que recibe parametros genericos y trabaja sobre ellos.
//Genericos

//Funcion sin genericos
//inout significa que son parametros que van a entrar y salir sin que nosotros los retornemos directamente
func swapTwoInts(a: inout Int, b: inout Int){
    let temporal = a 
    a = b 
    b = temporal 
}
var myFirstInt = 5
var mySecondInt = 10
print("El primer valor es \(myFirstInt) y el segundo \(mySecondInt)")
swapTwoInts(a: &myFirstInt, b: &mySecondInt)
print("El primer valor es \(myFirstInt) y el segundo \(mySecondInt)")

//Con genericos, asi puede entrar cualquier valor generico sin especificar el tipo de dato que va a entrar
func swapTwoGenerics<T>(a: inout T, b: inout T){
    let temporal = a 
    a = b 
    b = temporal 
}
var myFirstGeneric = 5
var mySecondGeneric = 10
print("El primer valor es \(myFirstGeneric) y el segundo \(mySecondGeneric)")
swapTwoGenerics(a: &myFirstGeneric, b: &mySecondGeneric)
print("El primer valor es \(myFirstGeneric) y el segundo \(mySecondGeneric)")
------------------------------------