------------------Caracteristicas---------------------
-Inyeccion de Dependencia, MVC, WebFlux, JPA, AOP...
-Spring Boot viene con un servidor TOMCAT ya preinstalado, optimizado para apps con spring.

Tomcat -> es una opción reconocida entre los desarrolladores web para crear y mantener webs dinámicas y aplicaciones basadas en Java.
Puedes utilizar Tomcat como contenedor de servlets para compilar y ejecutar aplicaciones web realizadas en Java, además de como servidor web autónomo en entornos con alto nivel de tráfico y alta disponibilidad.
------------------------------------------------------

-----------------Herramientas Necesarias-----------------
JDK -> Se recomienda la 11 o la 13.
	//Para el jdk podemos irnos a openjdk.java.net o descargar el oficial.
	//Copiamos en el entorno de variables en variables de usuario. C:\Program Files\Java\jdk1.8.0_202 en nueva poniendole un nombre de variable.
	//Añadimos en path variables de usuarioC:\Program Files\Java\jdk1.8.0_202\bin
Spring Tools IDE (Eclipse) -> Editor con herramientas.
	//spring.io/tools la version de ecipse
Maven -> Permite crear el proyecto, generando el archivo jar o war, yar, compilar, maneja las librerias del proyecto y las dependencias.
MySQL 8 -> 
---------------------------------------------------------

-----------------------IDE Spring Suite-----------------
//El proyecto al levantarlo aparece abajo en local, una vez levantado e vez de abrir otro para no ocupar otro puerto lo relanzamos en el apartado de local.
//O en vez de reiniciar de forma manual instalamos una dependencia, devtools, que permite reiniciar el servidor y aplicar cambios de forma instantanea.

//Marketplace la tenemos en help, eclipse marketplace

//Cambiar tema oscuro -> en la marketplace -> Darkest dark -> Despues de instalar preferences - general - appearance - theme
--------------------------------------------------------

-----------------------Crear proyecto-----------------
De primeras el starter project para aprender, en el nombre del package debemos anteponer web a la ruta si la app es una web, en la penultima posicion.
Elegimos el sdk que estamos utilizando y luego en la siguiente ventana instalamos las dependencias, en principio he instalado web web spring, dev tools y thymeleaf.

Si marca error en las dependencias en la carpeta C:\Users\vmpena\.m2 tenemos las dependencias, podemos eliminarla y descargar de nuevo las dependencias, cerrando previamente antes el ide eliminando m2 y abriendo el proyecto de nuevo.
-------------------------------------------------------

---------------------Archivos Spring--------------------------
pom.xml	-> Contiene todas las dependencias, version de java usada...
src/main/java -> Contiene las clases del proyecto
src/main/resource -> 
	/static -> Contiene los recursos del proyecto
	/template -> Para guardar las plantillas de thymeleaf por ejemplo.
	/application.properties -> En este archivo podemos sobreescribir toda la configuracion. No se puede colocar espacios en blanco al final de cada linea.
maven dependencies -> Contiene todas las dependencias con su .jar y su version.
target -> Cuando publiquemos y tengamos el .jar aqui se crea.
--------------------------------------------------------------



----------------------------------------Creando controlador y la vista--------------------------------------------
Creamos un nuevo package en src/main/java llamado com.bolsadeideas.springboot.web.app.controlers y dentro una clase llamada IndexController.
Una buena nomenclatura es que un controler la clase inicie en mayuscula y lleve al final Controler.
Un controlador va a tener metodos de accion o handler que va a manejar una accion HTTP a formulario, por ejemplo para mostrar un form, cargar datos, listado, consultas bdd, guardar, insertar o eliminar bd...
//Canda metodo handler o accion representa una web que hace algo y que trabaja con los datos de la app y esos datos se representan en una vista dentro de la respuesta. 
El controlador se encarga de manejar las peticiones del usuario, mostrar la pagina con la respuesta que el usuario a solicitado.


1º Añadimos el decorador @Controller a la clase y lo importamos con ctrl shift O.
2º Ponemos nuestro primer metodo de ejemplo, uno de mapear:
//Mapear el metodo a una ruta o url, para cuando el cliente escriba index y se carge la vista index.html, por defecto es de tipo get, pero se puede indicar con , method=RequestMethod.GET o con @GetMapping.
@RequestMapping(value = "/index")
	public String index() {
		//Cada metodo va a manejar una accion distinta
		return "index";
	}
3º Como estamos retornando una vista, por lo tanto tenemos que crear una plantilla index.html, que se guardara en los recursos en templates.
4º Mapear el metodo a una ruta o url, para cuando el cliente escriba index y se carge la vista index.html:
@RequestMapping 	//e importarlo
5ºPara crear la vista, en templates, new other, web, html file, si no aparece la version web https://marketplace.eclipse.org/content/eclipse-web-developer-tools-0
index.html

6º Lo ponemos en <meta charset="UTF-8"/>

7º Archivo aplication.properties añadimos:
spring.mvc.view.prefix=/WEB-INF/views/

7º Arrancamos clic derecho run as spring boot app.

8º Ahora en el navegador con /index podemos acceder

9º Si queremos reiniciarla clic en local y restar, pero no levantemos otra.
------------------------------------------------------------------------------------------------------------------

-----------------------------------------Pasar datos desde el controlador a la vista---------------------------------------------
1º Incluimos Model model en el metodo como parametro o Modelmap
2º Dentro del metodo model.addAttribute("titulo", "hola string framework");
2bº Podemos hacer lo siguiente en vez del punto 1 y 2 que es exactamente igual, importando desde import java.util.Map;:
public String index(Map<String, Object> model) {
		model.put("titulo", "hola string framework");
		return "index";
	}
2cº Tercera variacion:
public ModelAndView index(ModelAndView mv) {
		mv.addObject("titulo", "hola string framework");
		mv.setViewName("index");
		return mv;
	}
3º Añadimos como atributo al html del index.html lo siguiente para poder utilizar el atributo que hemos pasado en el titulo por ejemplo -> <html xmlns:th="http://www.thymeleaf.org">
4º Usamos el dato con la siguiente sintaxis -> <title th:text="${titulo}"></title>

Nota: La que más se utiliza es el Model.
---------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------RequestMapping-----------------------------------------------------------------------
//Con este mapeador la ruta va a ser accesible para todos los metodos del controlador.
//Se pone de forma global, por lo tanto lo que vaya en el request mapping de la clase seria de primer nivel y lo de los metodos de segundo nivel.

1º Lo ponemos como decorador de la clase -> @RequestMapping("/app")
					    public class IndexController {
2º Por lo tanto ahora para ir a la ruta deberemos de incluir donde antes incluiamos solo /index, con el app delante como primer nivel -> http://localhost:8080/app/index
---------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------Introduccion Spring MVC----------------------------------------------------------------------------------------------- IMPORTANTE************************************************************
//Es un framework web basado en MVC, modelo, vista y controlador, pudiendo inyectar dependencias, orientado al uso de interfaces y uso de clases POJO.

//Las clases POJO son clases simples de las que he usado siempre con sus get set parametros y demas

//El controlador trabaja los datos y renderiza la vista se los pasa a la clase POJO

//Como funciona SPRING:
Existe un front controller dentro de spring el cual se encarga de recibir las solicitudes , obtiene la ruta mapeada y va a buscar el controlador que corresponde y le asigna el request para obtener los datos que esta enviando., se llama DispatcherServlet
El controlador se relaciona con los componentes service por ejemplo de angular y obtiene los datos de la consulta y se los envia a la vista para que los muestre.
Le pasa los datos utilizando el model, map y lo visto en lo anterior., , se llama
El controlador asigna el nombre logico de la vista, /app/index, , se llama handler mapping
La vista por defecto es html, pero se puede configurar para que sea tipo PDF, EXCEL o lo que sea y finalmente la vista es mostrada al cliente usando los datos del model. , se llama view resolver.

//Que hace un controlador?
Proporciona acceso a la logica del negocio.
Delega la logica a los servicios y estos acceden a las bases de datos mediante la interfaz DAO (objeto de acceso a datos)
Los controladores reciben parametros del usuario mediante los input y lo convierten en un objeto del modelo.
------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------El objeto model----------------------------------------------------------------------------------------------
//Creamos un paquete llamado models y dentro de ella una clase llamada Usuario (POJO).


Clase usuario:
1º Ponemos atributos y generamos los getters and setters con alt shift s y generate... como atajo, sino desde boton derecho source.

2º Creamos un event handler en el controlador, como funcion con el decorador que enlaza a la vista, con este controlador lo que haremos es crear un usuario y pasarselo a la vista /perfil. De normal sacariamos ese usuario de una BBDD:
	@RequestMapping("/perfil")
	public String perfil(Model model) {
		
		Usuario usuario = new Usuario();
		usuario.setApellido("Pena");
		usuario.setNombre("Victor");
		model.addAttribute("usuario", usuario);
		model.addAttribute("titulo", "Perfil del usuario: ".concat(usuario.getNombre()));	
		
		return "perfil";
		
	}

3º Creamos el html perfil en templates, recordando incluir el atributo <html xmlns:th="http://www.thymeleaf.org"> en <html> y el "UTF-8/" en el meta.

4º Ahora trabajamos con la información recibida en la vista, por ejemplo el nombre del usuario en un <span> para poder escribir (Recordar que pasamos el objeto usuario) -> <span th:text="${usuario.nombre}"></span>
------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------If en thymeleaf-------------------------------------------------------------------------------------
//Mostrar un email si este email existe mediante un if thymeleaf -> <span th:if="${usuario.email}" th:text="${usuario.email}"></span>

//Escribir un mensaje si el usuario es nulo, mediante un if -> <span th:if="${usuario.email == null}" th:text="'El usuario no tiene correo'"></span>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------Array en thymeleaf-------------------------------------------------------------------------------------
1º Creamos la funcion con que pasara los datos a la vista en el controlador:
@RequestMapping("/listar")
	public String listar(Model model) {
		List<Usuario> usuarios = new ArrayList<>();		
		
		model.addAttribute("titulo", "Listado Usuarios");
		model.addAttribute("usuarios", usuarios);
		
		return "listar";
}

2º Creamos el html y su logica, por ejemplo que si esta vacio el array muestre algo -> <div th:if="${usuarios.size()==0}">No hay usuarios registrados</div>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------for-each en thymeleaf-----------------------------------------------------------------------------------------------------------
3º Creamos un array y tal con usuarios en el Controller:

4º Listamos los datos en una tabla con el foreach:
<table>
		<div th:if="${usuarios.size() > 0}">
			<thead>
				<tr>
					<th>Nombre</th>
					<th>Apellido</th>
					<th>Email</th>
				</tr>
			</thead>
			<tbody>
				<tr th:each="usuario: ${usuarios}">					
					<td th:text="${usuario.nombre}"></td>
					<td th:text="${usuario.apellido}"></td>
					<td th:text="${usuario.email}"></td>
				</tr>
			</tbody>
		</div>
</table>

NOTA: A la hora de crear el array podemos simplificarlo usando la clase Arrays, de java util -> List<Usuario> usuarios = Arrays.asList(new Usuario("Andres", "Guzman", "andres@correo.com"), new Usuario("Jhon", "Doe", "jhon@correo.com"), new Usuario("Jane", "Pena", "jane@correo.com"));
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------@ModelAttribute-----------------------------------------------------------------------------------------------
//Otra forma de pasar datos a la vista, es comun a todos los metodos del controlador, se usa cuando se quiere pasar a varios handle, en plan al /home, /listar, /perfil..., cuando se quiere usar en varias vistas.

1º Ejemplo
@ModelAttribute("usuarios")
	public List<Usuario> poblarUsuarios(){
		List<Usuario> usuarios = Arrays.asList(new Usuario("Andres", "Guzman", "andres@correo.com"), new Usuario("Jhon", "Doe", "jhon@correo.com"), new Usuario("Jane", "Pena", "jane@correo.com"));
		
		return usuarios;
	}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------@RequestParam-------------------------------------------------------------------------------------------------
//Permite enviar parametros mediante url del request HTTP GET - URL

1º Capturamos el dato que introduciremos en la URL con @RequestParam(name="texto") en el metodo:
	@GetMapping("/string")
	public String param(@RequestParam(name="texto") String texto, Model model) {
		model.addAttribute("resultado", "El texto enviado es" + texto);
		return "params/ver";
	}

1bº Podemos poner requerido false para que si no recibe parametro no falle la pagina -> @RequestParam(name="texto", required = false)
1cº Podemos poner un parametro por defecto si no recibe parametro -> (@RequestParam(name="texto", required = false, defaultValue = "Heyy")
2º Recibimos el parametro con la variable resultado en el html ver:
<div th:text="${resultado}"></div>
3º Para probarlo podemos enviar manualmente el dato en la url > http://localhost:8080/params/string?texto=Hola%20que%20tal
4º Tambien podemos enviar el parametro desde unos enlaces en otro .html mientras tenga la etiqueta @Request param:
	<ul>
		<li>
			<a th:href="@{/params/string(texto='Hola Victor')}">Este link envia un parametro por URL</a>
		</li>
		<li>
			<a th:href="@{/params/string(texto='Que tal')}">Este link es iwa</a>
		</li>
	</ul>

//Enviar varios parametros por url y de distintos tipos***************
1º En el controlados hacemos el metodo correspondiente:
@GetMapping("/mix-params")
	public String param(@RequestParam String saludo, @RequestParam Integer numero, Model model) {
		model.addAttribute("resultado", "El texto enviado es: " + saludo + (numero*2));
		return "params/ver";
	}
2º Lo enviamos por ejemplo con -> <a th:href="@{/mix-params/string(saludo='Que tal', numero=7)}">Este link es el multiparametros</a>


//Otra forma de enviar parametros, permite que la clase que se retorna pueda obtener parametros, un string y un integer en este caso, lo que no sea string hay que convertirlo:
@GetMapping("/mix-params-request")
	public String param(HttpServletRequest request, Model model) {
		String saludo = request.getParameter("saludo");
		Integer numero = null;
		try {		//Por si se mete un int que no salte error
		numero = Integer.parseInt(request.getParameter("numero"));
		}catch(NumberFormatException e) {
			numero = 0;
		}

****************
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------@PathVariable-------------------------------------------------------------
//Otra forma de mandar parametros mediante URL pero esta vez en la ruta que estamos mapeando en los metodos handler. Este es mejor de normal.
@GetMapping("/string/{parametroAenviar}")
	public String variables(@PathVariable String parametroAenviar, Model model) {
		model.addAttribute("titulo", "Recibir parámetros de la ruta(@PathVariable)");
		model.addAttribute("resultado", "El texto enviado en la ruta es " + parametroAenviar);
		return "variables/ver";
	}

//Enviar dos parametros con PathVariable:
1º
@GetMapping("/string/hey{parametroAenviar}/{numero}")
	public String variables(@PathVariable String parametroAenviar,@PathVariable Integer numero, Model model) {
		model.addAttribute("titulo", "Recibir parámetros de la ruta(@PathVariable)");
		model.addAttribute("resultado", "El texto enviado en la ruta es " + parametroAenviar + " este numero: " + numero);
		return "variables/ver";
	}
2º
@GetMapping("/")
	public String index(Model model) {
		model.addAttribute("titulo", "Enviar parámetros a la ruta(@PathVariable)");
		return "variables/index";
	}
3º Hcemos un html y enviamos el dato -> <il><a th:href="@{/variables/string/} + 'Saludos Andres' + '/' + 7">Saludos Andres</a></il>
-----------------------------------------------------------------------------------------------------------------

--------------------------------------------Agregar recursos estaticos y estilos CSS----------------------------------
//Se guardan en la carpeta static dentro de resources.
//El css se guarda dentro de static en una carpeta css

//Podemos agregarlos en el html mediante (la vista):
<img th:src="@{/images/spring.png}"></img>
<link rel="stylesheet" type="text/css" th:href="@{/css/style.css}"></link>		//Para una especie de importar todo el css
//Nota "@{}" es como poner la ruta por defecto del proyecto, por eso luego continua con lo que interesa.

----------------------------------------------------------------------------------------------------------------------

----------------------------------------------Inyectar valores con @Value------------------------------------------------
//Podemos desacoplar textos del controlador y llevarlos a otro lado por ejemplo el applicatio.properties e inyectar a atributos con @Value.
//De esta manera podremos usar los string centralizando desde propierties y aplicar cambios globales con un solo cambio.

//Podemos quitar los warnings amarillos dejando el raton encima y añadiendolo al metadata, esta informacion se puede observar en el META-INF.

1º Para inyectar values, creamos una variable de tipo String y le ponemos la ruta que tendra en el properties, la cual debe de ser la ruta donde se va a poner esa variable:
@Value("${texto.indexcontroller.index.titulo}")
	private String textoIndex;

2º En el properties debemos tener:
texto.indexcontroller.index.titulo: hola string framework con Model desde properties!

3º Para usarlo:
@GetMapping({"/index","/home","/"})
	public String index(ModelMap model) {
		model.addAttribute("titulo", textoIndex);
		return "index";
	}

NOTA: EL NOMBRE PUEDE SER CUALQUIERA SI COINCIDE  CON EL DE PROPIERTIES; PERO LA COSA ES QUE TENGA SENTIDO E IDENTFIQUE LA RUTA EN LA QUE ESTA
@Value("${pepe.paquito.peresoso.poca}")
	private String textoIndex;

**************
//Se pueden guardar en otros propierties.
1º Creamos un archivo .propierties, por ejemplo textos.propierties en la raiz de resources.

2º Ahora debemos de indicarle al framework que este fichero va a ser usado para ello tenemos que crear una clase .conf en la raiz, asi que en el caso de spring, en la raiz el primer paquete de src, donde esta el SpringBootWebApplication.java, creamos TextosPropertiesConfig (esta es la nomenclatura) y añadimos el siguiente contenido:
package com.bolsadeideas.springboot.web.app;

import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.annotation.PropertySources;

@Configuration
@PropertySources({
	@PropertySource("classpath: textos.properties"),
	@PropertySource("classpath: textos.meh")
})
public class TextosPropertiesConfig {

}

//clashpath  es dnd estan los recursos
//Se pueden poner muchos .properties con la ,

**************
-------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------Retornar redirect y forward como respuesta en los controladores--------------------------------------------------------------------------------------------
//Es para redirigir a otra ruta:
1º Creamos el controlador HomeController, el cual tendra un metodo y ese metodo redirijira al IndexController, desde la raiz.:
@Controller
public class HomeController {
	@GetMapping("/")
	public String home() {
		return "forward:/app/index";
		//return "redirect:https://www.google.com";
		//return "redirect:/app/index";
	}
}

//La opcion ideal para implementar una pagina de inicio seria con forwar, esto lo hace por debajo sin cambiar la ruta del navegador de forma visible.
//return forward:/app/index	  		//Redirige a la ruta pero sin recargar la pagina, lo hace por debajo.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------Despliegue y ejecucion desde terminal(deploy)---------------------------------------------------------------------------------------------
//En la ruta del archivo:
.\mvnw.cmd package

//Luego lo compilamos en la misma ruta:
java -jar .\target\spring-boot-web-0.0.1-SNAPSHOT.jar
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------Clase Service-------------------------------------------------------------------------------------------------
//Se encarga de trabajar con los datos, es una fachada de los objetos DAO, realiza consultas y operaciones en las tablas...
1º Creamos un paquete en el paquete models llamado service.
2º Creamos la clase  MiServicio

3º La clase contiene cualquier proceso que vaya a ser un servicio:
public class MiServicio {
	
	public String operacion() {
		return "ejecutando algun proceso importante...";
	}
}

4º Incorporamos el servicio en el IndexController:
@Controller
public class IndexController {
	
	private MiServicio servicio = new MiServicio();
	
	@GetMapping({"/", "","/index"})
	public String index(Model model) {
		model.addAttribute("objeto", servicio.operacion());
		return "index";
	}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------Implementar inyeccion dependencia-----------------------------------------------------------------------------
//La idea es desacoplar el new MiServicio, la idea es que se pueda inyectar y manegar con el controlador de spring.

1º Para ello ponemos la anotacion @Component  o @Service(es lo mismo pero como fachara como buena practica) en el servicio para declarar que se puede inyectar.
@Component
public class MiServicio {
	
	public String operacion() {
		return "ejecutando algun proceso importante...";
	}
}

2º Quitamos  = new MiServicio() de la clase controladora, ya que lo vamos a desacoplar e inyectar y lo dejamos con @Autowired:
	@Autowired
	private MiServicio servicio;

De esta forma acoplamos un servicio sin inyectarlo.



****************************
INYECTAR MEDIANTE INTERFACE
****************************
//Se trata de desacoplar el tipo de la clase y aplicarlo mediante una interfaz por si en el futuro cambiamos el nombre de la clase que no tengamos que cambiarlo en todos los controller.
1º Creamos una interfaz en el paquete modes.service llamada IServicio, boton derecho new interface.
public interface IServicio {
	public String operacion();
}
2º Implementamos la interfaz en el servicio.vaja (MiServicio.java) -> public class MiServicio implements IServicio{

3º Añadimos el @Override al metodo que estamos sobrescribiendo en MiServicio.java que ha implementado la interface:
@Component
public class MiServicio implements IServicio{
	
	@Override
	public String operacion() {
		return "ejecutando algun proceso importante...";
	}
}

4º Ahora podemos usar la interfaz para inyectar como tipo generico:
	@Autowired
	private IServicio servicio;

Nota: Es una buena practica darle al service.java un identificador al @Component o @Service para poder saber de donde viene:
@Component("miServicio")
public class MiServicio implements IServicio{

NOTA2: TODO COMPONENTE QUE SEA UNA CLASE DEBE DE TENER UN CONSTRUCTOR VACIO
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------Teoria Inyeccion de Dependencia-----------------------------------------------------------------------------------------------
¿Que es la Inyección de Dependencia?
Suministra a un objeto una referencia de otro que este registrado como por ejemplo con @Component

//@Component es un estereotipo generico para cualquier componente manejado por Spring, @Repository, @Service y @Controller son especializaciones de@Component para usos más específicos.
@Repository para persistencia, componentes que acceden a los datos (DAOs)
@Service para servicios de lógica de negocio
@Controller para controladores MVC - Modelo Vista Controller

//Bean se utiliza para referirse a cualquier componente manejado por Spring.
Deben ser anotados con @Component o derivados, constructor vacio por defecto, sin argumentos y estos son manejados por el contenedor DI de Spring.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------- Inyeccion de dependencias por constructor y metodos setters-----------------------------------------------------------------
//Es una alternativa a inyectar mediante @Autowired, mediante setters:
//Por ejemplo mediante constructor todos los parametros que esten dentro los inyecta:
	
	private IServicio servicio;
	
	@Autowired
	public IndexController(IServicio servicio) {
		this.servicio = servicio;
	}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------- @Primary----------------------------------------------------------------------------------------------------
//Se usa cuando estamos inyectando en otra clase algo que ya esta implementado en otra, para marcar como primario en el que lo pongamos.
@Component("miServicioComplejo")
@Primary
public class MiServicioComplejo implements IServicio{
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------- @Qualifier -------------------------------------------------------------------------------------------
//Para inyectar si no es primary y ya esta inyectado primary podemos inyectar mediante @Qualifier.

//Tenemos que ponerle un nombre a @Component("miservicioComplejo") en el servicio.

//A la hora de llamarlo en el controller añadimos Qualifier
	@Autowired
	@Qualifier("miservicioComplejo")
	private IServicio servicio;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------Alternativa para registrar componentes mediante @Bean--------------------------------------------------------
1º Para ello creamos una clase configuracion:
package com.bolsadeideas.springboot.di.app;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

import com.bolsadeideas.springboot.di.app.models.service.IServicio;
import com.bolsadeideas.springboot.di.app.models.service.MiServicio;

@Configuration
public class AppConfig {
	
	@Bean("miServicioSimple")
	@Primary
	public IServicio registrarMiServicio() {
		return new MiServicio();
	}
	
	@Bean("miServicioComplejo")
	
	public IServicio MiServicioComplejo() {
		return new MiServicio();
	}
}

//Si son clases nuestras lo hacemos con el otro metodo y si son apis frameworks de 3ro tiene que ser con el metodo de @configuration y @bean

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------Ejemplo Factura-------------------------------------------------------------------------------------
1º Como son clases POJO creamos un package dentro de models, llamado .entity, tener en cuenta que debe de ser app.models.entity. A veces tb se le llama domain al package.
2º Creamos dentro la clase Cliente por ejemplo.
3º Ejemplo de Cliente.java:
package com.bolsadeideas.springboot.di.app.models.entity;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class Cliente {
	
	@Value("${cliente.nombre}")
	private String nombre;
	@Value("${cliente.apellido}")
	private String apellido;

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public String getApellido() {
		return apellido;
	}

	public void setApellido(String apellido) {
		this.apellido = apellido;
	}

}

//Esta anotado como componente spring porque en este caso esta clase va a ser usada por spring, peor no siempre es necesario anotarlo como @Component


4º En el fichero AppConfig.java añadimos el siguiente metodo @Beans para que spring pueda trabajar con estas clases POJO que he creado, en concreto con itemsFactura, gracias a esto podemos inyectarlo sin hacer new ItemFactura mememe:
	@Bean("itemsFactura")
	public List<ItemFactura> registrarItems(){
		Producto producto1 = new Producto("Camara Sony", 100);
		Producto producto2 = new Producto("Bicicleta Bianchi", 200);
				
		ItemFactura linea1 = new ItemFactura(producto1, 2);
		ItemFactura linea2 = new ItemFactura(producto2, 2);
		
		return Arrays.asList(linea1, linea2);
	}

5º Ahora creamos la clase controladora de estas clases POJO:
package com.bolsadeideas.springboot.di.app.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.bolsadeideas.springboot.di.app.models.entity.Factura;

@Controller
@RequestMapping("/factura")
public class FacturaController {
	
	@Autowired
	private Factura factura;
	
	@GetMapping("/ver")
	public String ver(Model model) {
		model.addAttribute("factura", factura);
		model.addAttribute("titulo", "Ejemplo Factura con inyección de dependencia");
		return "/ver";
	}
}

6º Creamos la vista /ver:
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title th:text="${titulo}"></title>
</head>
<body>
<h1 th:text="${titulo}"></h1>
<h3 th:text="${factura.descripcion}"></h3>
<div>Cliente: <span th:text="${factura.cliente.nombre + ' ' + factura.cliente.apellido}"></span></div>
<h4>Detalle de la factura</h4>
<table>
<thead>
<tr>
<th>Producto</th>
<th>Precio</th>
<th>Cantidad</th>
<th>Total</th>
</tr>
</thead>
<tbody>
<tr th:each="item ${factura.items}">
	<td th:text="${item.producto.nombre}"></td>
	<td th:text="${item.producto.precio}"></td>
	<td th:text="${item.cantidad}"></td>
	<td th:text="${item.producto.precio * item.cantidad}"></td>
</tr>
</tbody>
</table>
</body>
</html>

//NOTA para solucionarlo lo de los acentos en los archivos .propierties, boton derecho en application properties y cambiamos a utf-8 o por ejemplo y asi con todos:
para acento en la e Andrés -> Andr&eacute;s
en la a  Guzmán-> Guzm&aacute;n

//NOTA 2 para solucionar lo de los acentos en los html en vez de -> <div>Cliente: <span th:text="${factura.cliente.nombre + ' ' + factura.cliente.apellido}"></span></div>, añadimos una u a th:utext
<div>Cliente: <span th:utext="${factura.cliente.nombre + ' ' + factura.cliente.apellido}"></span></div>

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------Ciclo de vida de un componente--------------------------------------------------------------
*****************
@PostConstruct
*****************
	@PostConstruct
	public void inicializar() {		
		cliente.setNombre(cliente.getNombre().concat(" ").concat("Jose"));
		descripcion = descripcion.concat("del cliente").concat(cliente.getNombre());
	}
//Se ejecuta justo despues de crear el objeto y que se hayan inyectado las dependencias, por lo tanto podemos cambiar algun valor del cliente for example.

****************
@OnDestroy
****************
	@PreDestroy
	public void destruir() {
		System.out.println("Factura destruida".concat(descripcion));
	}
-------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------Contexto (Scote) de los componentes-------------------------------------------------------------------
//Por defecto usamos una sola instancia de cada componente, (singleton), peor podmeos cambiarlo.
1º Cambiar factura de tipo singleton a request, por ejemplo, esto sirve para que la factura solo dure lo que dura la peticion http y no toda la sesion del navegador, muy util:
@Component
@RequestScope
public class Factura {
2º
-------------------------------------------------------------------------------------------------------------------------------------------------------