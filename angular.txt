------------------Instalacion Angular------------------------
Visual Studio Code -> https://code.visualstudio.com/
--Extensiones:
	-Activitus Bar, Code Runner, Flatland Monokai Theme, Bracket Pair Colorizer, Bracket-pair-colorizer-2.colors, Material icon theme, Angular snippets, Angular language service, Angular inline, Auto close tag, Typescript importer

Postman -> https://www.postman.com/downloads/
--Sirve mucho para hacer pruebas con los endpoints, antes de hacer la integracion con angular se prueba con esto.
--Login : victorpenawow@gmail.com, vittywow, pass without .

MongoDB -> https://www.mongodb.com/try/download/compass
--Gestor para ver nuestra bd para ver nuestra bd.

Node -> https://nodejs.org/es/
--Gestor de javascript asincrono
--Para verificar que ha sido correctamente instalado -> Terminal -> node --version

Angular -> https://angular.io/cli
--En powershell -> npm install -g @angular/cli -> Si da error al comprobar con ng --version --> Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser --> Comprobamos con ng --version
--Permite usar comandos angular, nos ayuda a generar la app, componentes, directivas, servicios..., pero antes lo voy a probar manualmente.
-------------------------------------------------------------

------------TypeScript-----------------
Es un superset de javascript extendiendo caracteristicas. 
Angular utiliza typescript porque es tipado evitando errores y nos permite la inyeccion de dependencias.
Contiene la aplicacion en una sola pagina, pero si necesitas puedes poner más.
---------------------------------------

-------------Angular Teoria-------------------
//Podemos usar angular para app de moviles, de escritorio, webs...
//Es un framework
//Es modular, se crean modulos.
//Google lo mantiene hoy dia.
//Se compone de:
	Componentes -> HTML, TypeScript
	Rutas -> Diferentes componentes basados en el URL.
	Directivas -> Directivas de componentes, estructurales y de atributos.
	Servicios -> Se puede usar otros gestores, pero angular te permite trabajar de forma centralizada.
	Modulos -> Modulo de productos por ejemplo donde esta todo lo de productos.
---------------------------------------------

*******************************Crear un proyecto Angular************************************************
//En la carpeta donde queremos crearlo.. cd ruta
ng new bases -> Le indicamos si queremos crear el archivo de rutas y si queremos css, scss...
//Renombramos bases a el nombre del proyecto.

//Para mostrarla en el navegardor web la aplicacion
ng serve -o para compilar la app y mostrarla en el navegador web.
--------------------------------------------------
---------Cada archivo del proyecto Angular----------------
e2e -> Parte de pruebas, aqui se hace la configuracion de las pruebas
---------------------------------------------------------
src -> 
	app -> Contiene:
		app.component.css -> Contiene el css de la app
		app.component.html -> Contiene el html de la app
		app.component.specs.ts -> Esta relacionado a pruebas
		app.component.ts -> Es una clase de typeScript.
		app.module.ts -> Es una clase qe hace como de 'agrupador'
	assets -> Son recursos.
	environments -> Es un lugar para las variables de entorno de desarrollo, environment.prod de prod y el environment.ts de produccion.
	favicon -> Es el icono de la web
	index.thml -> Pagina html 
	main.ts	-> Ayuda a decirle a angular el ambiente en el que se corre, no se suele tocar	.
	polyfills.ts -> Ayuda a tener mayor compatibilidad con otros navegadores web, no se suele tocar
	styles.css -> Es css que se aplica a toda la aplicacion.
	test.ts -> Es un ambiente de pruebas.
---------------------------------------------------------
	
.json -> Son archivos de configuracion.
tsconfig.json -> Archivo configuracion de typescript, como quiere que se traduzca a javascript.
tsconfig.spec.json -> Relacionado a la parte de las pruebas, de integracion y tal.
package.json -> No se suele tocar, contiene las dependencias de desarrollo y otras.
package-lock.json -> No se toca, dice como se construyo cada modulo y demas
karma.conf.js -> Archivo para las pruebas de integracion basadas en karma
angular.json -> Archivo importante que contiene configuracines importantes de la aplicacion, como el favicont, cargar los assets, el styles.css...
.gitignore -> Que no le de seguimiento git
.editorconfig -> Son reglas para los archivos en general, no se suele tocar
.browserlistrc -> No se suele tocar, por si acaso necesitamos incrementar compatibilidad a windows 11.
*******************************************************************************************************************

-------------------------App Component-------------------------
app.component.ts ********
	//Component requiere un objeto, minimo con selector el cual tendra el nombre del componente, donde se encuentra el html (template que queramos poner) y css
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Contador App';
}

//En el .html podemos colocar el titulo con una variable que se encuentre en el .ts, por ejemplo:
<!--Se puede colocar el titulo desde otro lado de esta manera-->
<h1> {{ title }} </h1>

<!--No se aconseja de que la logica la haga el template, debe de ser el componente de typeScript-->
//Boton Con evento:
<button (click)=" numero = numero +1;"> -1 </button>
//O habiendo puesto la funcion en el componente.ts
<button (click)="sumar()"> +1 </button>


Metodos en el componente*************
//En el componente.ts dentro del export class AppComponent:
sumar(){
    this.numero += 1
  }
*******************************
---------------------------------------------------------------

---------------------Crear componente manualmente------------------------
//Lo primero para llamar el componente es con y lo llamaremos desde el index.html o donde sea:
<body>
  <app-root></app-root> <!--Este sera el nombre del componente incluido en @component selector -->
</body>

//Crearlo*****
//Boton derecho en app y creamos un nuevo archivo -> nombre.component.ts
import { Component } from '@angular/core';		//Importamos los componentes del core de angular, para posteriormente incluir el decorador en la clase que le convertira en componente.

@Component({
    selector:'app-contador',
    template: `
    <!--Se puede colocar el titulo desde otro lado de esta manera-->
        <h1> {{ title }} </h1>
        <h3>La base es: <strong> {{ base }} </strong></h3>


        <!--No se aconseja de que la logica la haga el template, debe de ser el componente de typeScript-->
        <button (click)="acumular(base)"> +{{base}} </button>

        <span> {{ numero }} </span>

        <button (click)="acumular(-1)"> -1 </button>

    `,
    styleUrls: ['./app.component.css']
})
//Export para utilizarlo fuera del archivo
export class ContadorComponent{
    title: string = 'Contador App';
  numero: number = 10;

  base: number = 5;

  acumular(valor: number){
    this.numero += valor;
  }
}

---------------------
//Despues de esto hay que añadirlo en app.module.ts en declarations e importarlo, la coma es importante.
declarations: [
    AppComponent,
    ContadorComponent
  ]
---------------------
//Ahora por ejemplo llamamos al componente desde app.component.html que a su vez esta llamado desde index.html, de esta manera:
<app-contador></app-contador>
**************
----------------------------Fin crear componente---------------------------

----------------------------Crear componente  de forma automatica------------------------------
//En la terminal, en la ruta ->
ng g c heroes/listado -> Es igual a ng generate component ruta

//En el compontent.ts se crea automaticamente el OnInit que es el equivalente al Oncreate:
export class ListadoComponent implements OnInit {

  constructor() { 
    console.log('constructor')
  }

  ngOnInit(): void {
    console.log('onInit')
  }

}
-----------------------------Fin Codigo Ejemplo
-----------------------------------------------------------------------------------------------

----------------------------- Directiva ngFor----------------------------------
//Es un foreach en html para incluir el contenido de un array
<ul>
 <li *ngFor="let heroe of heroes">
        {{heroe}}
 </li>
</ul>

//Se puede poner el index:
<li *ngFor="let heroe of heroes; let i = index">
        {{i}} - {{heroe}}
    </li>
-------------------------------------------------------------------------------

-------------------------------Directiva nglf----------------------------------

//Ocultar una etiqueta hasta que se cumpla una condicion, por ejemplo si es false no aparece, si es true aparece:
<div *ngIf="false">
    <h3>Heroe Borrado</h3>
    <span>{{heroeBorrado}}</span>
    <button (click)="borrarHeroe()">Borrar</button>
</div>

//Mismo ejercicio que se aplique cuando el heroe este borrado, similar al if:
<div *ngIf= " heroeBorrado != ''">
    <h3>Heroe Borrado</h3>
    <span>{{heroeBorrado}}</span>
    <button (click)="borrarHeroe()">Borrar</button>
</div>
-------------------------------------------------------------------------------

---------------------------------Directiva Ng-Template y nglf-else-------------------------------------
//nglf else, para que si no cumple la condicion haga otra cosa y ng-template es la otra cosa con la referencia que se le ponga.

//Ejemplo:
<div *ngIf= "heroeBorrado != ''; else noborrado">
    <h3>Heroe Borrado</h3>
    <span>{{heroeBorrado}}</span>    
</div>

<ng-template #noborrado>
    <h3>No ha borrado nada.</h3>
</ng-template>
-------------------------------------------------------------------------------------------------------

-----------------------------Modulos-----------------------------------
//Que es un modulo, el objetivo de los modulos es ayudarnos a agrupar componentes que tienen sentido entre sí. Cargandolos solo cuando sea necesario y de esa manera liberar carga del sistema.
//Para ello:
Dentro de la carpeta que queramos agrupar modulos, boton derecho nuevo archivo heroes.module.ts	(En este ejemplo he creado el modulo heroes para agrupar los componentes de heroes dentro de la carpeta heroes).

//En archivo module.ts tenemos que importar lo necesario de un modulo, tener la clase del modulo y ponerle la declaracion NgModule necesaria. 
Dentro de esta declaracion (declarations) estan los componentes que voy a tener en el modulo.
Los exports son los que quiero hacer visibles fuera de este modulo.
Los imports contienen modulos.

//Ejemplo de modulo:
import { CommonModule } from '@angular/common';
import{ NgModule} from '@angular/core'
import { HeroeComponent } from './heroe/heroe.component';
import { ListadoComponent } from './listado/listado.component';

@NgModule({
    declarations:[
        HeroeComponent,
        ListadoComponent
    ],
    exports:[
        ListadoComponent
    ],
    imports:[
        CommonModule			
    ]
})
export class HeroesModule{}
//----Fin de ejemplo de modulo----

//Para usar el modulo, en el app.module.ts en el apartado de imports, ponemos el nombre del modulo a importar, en este caso con HeroesModule
-----------------------------------------------------------------------

--------------Reconstruir node_modules-------------------
//En la ruta del proyecto npm install y los reconstruira.
----------------------------------------------------------

---------------Generar Modulo automaticamente-------------
ng g m dbz 	//Acortado generar modulo automaticamente
----------------------------------------------------------

--------------- Form module---------------------
//Es una ayuda de angular para que los submit de nuestros formularios no refresquen la pantalla.

//Importamos el modulo FormsModule en el module.ts del componente
//En el form añadimos el ngSubmit vinculado al evento del ts:
	<form (ngSubmit)="agregar( )">
            <input type="text" placeholder="Nombre">
            <input type="text" placeholder="Poder">   

            <button type="submit">Agregar</button>
	</form>

//
//Evento del form con ngSubmit
  agregar(){    
    console.log('Hey');
  }

//Si sigue refrescandose al aplicar el formulario *ng serve* de nuevo en el cmd.
------------------------------------------------