------------------Instalacion Angular------------------------
Visual Studio Code -> https://code.visualstudio.com/
--Extensiones:
	-Activitus Bar, Code Runner, Flatland Monokai Theme, Bracket Pair Colorizer, Bracket-pair-colorizer-2.colors, Material icon theme, Angular snippets, Angular language service, Angular inline, Auto close tag, Typescript importer

Alternativa Visual Studio Code- Atom-> https://atom.io/
--Extensiones:
	-angular-2-typescript-snippets, atom-typescript, atom-bootstrap3, atom-bootstrap4, v-bootstrap4, platformio-ide-terminal, file-icons, emmet, minimap
--Escogemos theme: 

Postman -> https://www.postman.com/downloads/
--Sirve mucho para hacer pruebas con los endpoints, antes de hacer la integracion con angular se prueba con esto.
--Login : victorpenawow@gmail.com, vittywow, pass without .

MongoDB -> https://www.mongodb.com/try/download/compass
--Gestor para ver nuestra bd para ver nuestra bd.

Node -> https://nodejs.org/es/
--Gestor de javascript asincrono
--Para verificar que ha sido correctamente instalado -> Terminal -> node --version

Angular -> https://angular.io/cli
--En powershell -> npm install -g @angular/cli -> Si da error al comprobar con ng --version --> Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser --> Comprobamos con ng --version
--Permite usar comandos angular, nos ayuda a generar la app, componentes, directivas, servicios..., pero antes lo voy a probar manualmente.
-------------------------------------------------------------

------------TypeScript-----------------
Es un superset de javascript extendiendo caracteristicas. 
Angular utiliza typescript porque es tipado evitando errores y nos permite la inyeccion de dependencias.
Contiene la aplicacion en una sola pagina, pero si necesitas puedes poner más.
---------------------------------------

-------------Angular Teoria-------------------
//Podemos usar angular para app de moviles, de escritorio, webs...
//Es un framework
//Es modular, se crean modulos.
//Google lo mantiene hoy dia.
//Se compone de:
	Componentes -> HTML, TypeScript
	Rutas -> Diferentes componentes basados en el URL.
	Directivas -> Directivas de componentes, estructurales y de atributos.
	Servicios -> Se puede usar otros gestores, pero angular te permite trabajar de forma centralizada.
	Modulos -> Modulo de productos por ejemplo donde esta todo lo de productos.
---------------------------------------------

*******************************Crear un proyecto Angular************************************************
//En la carpeta donde queremos crearlo.. cd ruta
ng new bases -> Le indicamos si queremos crear el archivo de rutas y si queremos css, scss...
//Renombramos bases a el nombre del proyecto.

//Para mostrarla en el navegardor web la aplicacion
ng serve -o para compilar la app y mostrarla en el navegador web.
--------------------------------------------------
---------Cada archivo del proyecto Angular----------------
e2e -> Parte de pruebas, aqui se hace la configuracion de las pruebas
---------------------------------------------------------
src -> 
	app -> Contiene:
		app.component.css -> Contiene el css de la app
		app.component.html -> Contiene el html de la app
		app.component.specs.ts -> Esta relacionado a pruebas
		app.component.ts -> Es una clase de typeScript.
		app.module.ts -> Es una clase qe hace como de 'agrupador'
	assets -> Son recursos.
	environments -> Es un lugar para las variables de entorno de desarrollo, environment.prod de prod y el environment.ts de produccion.
	favicon -> Es el icono de la web
	index.thml -> Pagina html 
	main.ts	-> Ayuda a decirle a angular el ambiente en el que se corre, no se suele tocar	.
	polyfills.ts -> Ayuda a tener mayor compatibilidad con otros navegadores web, no se suele tocar
	styles.css -> Es css que se aplica a toda la aplicacion.
	test.ts -> Es un ambiente de pruebas.
---------------------------------------------------------
	
.json -> Son archivos de configuracion.
tsconfig.json -> Archivo configuracion de typescript, como quiere que se traduzca a javascript.
tsconfig.spec.json -> Relacionado a la parte de las pruebas, de integracion y tal.
package.json -> No se suele tocar, contiene las dependencias de desarrollo y otras.
package-lock.json -> No se toca, dice como se construyo cada modulo y demas
karma.conf.js -> Archivo para las pruebas de integracion basadas en karma
angular.json -> Archivo importante que contiene configuracines importantes de la aplicacion, como el favicont, cargar los assets, el styles.css...
.gitignore -> Que no le de seguimiento git
.editorconfig -> Son reglas para los archivos en general, no se suele tocar
.browserlistrc -> No se suele tocar, por si acaso necesitamos incrementar compatibilidad a windows 11.
*******************************************************************************************************************

-------------------------App Component-------------------------
app.component.ts ********
	//Component requiere un objeto, minimo con selector el cual tendra el nombre del componente, donde se encuentra el html (template que queramos poner) y css
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Contador App';
}

//En el .html podemos colocar el titulo con una variable que se encuentre en el .ts, por ejemplo:
<!--Se puede colocar el titulo desde otro lado de esta manera-->
<h1> {{ title }} </h1>

<!--No se aconseja de que la logica la haga el template, debe de ser el componente de typeScript-->
//Boton Con evento:
<button (click)=" numero = numero +1;"> -1 </button>
//O habiendo puesto la funcion en el componente.ts
<button (click)="sumar()"> +1 </button>


Metodos en el componente*************
//En el componente.ts dentro del export class AppComponent:
sumar(){
    this.numero += 1
  }
*******************************
---------------------------------------------------------------

---------------------Crear componente manualmente------------------------
//Lo primero para llamar el componente es con y lo llamaremos desde el index.html o donde sea:
<body>
  <app-root></app-root> <!--Este sera el nombre del componente incluido en @component selector -->
</body>

//Crearlo*****
//Boton derecho en app y creamos un nuevo archivo -> nombre.component.ts
import { Component } from '@angular/core';		//Importamos los componentes del core de angular, para posteriormente incluir el decorador en la clase que le convertira en componente.

@Component({
    selector:'app-contador',
    template: `
    <!--Se puede colocar el titulo desde otro lado de esta manera-->
        <h1> {{ title }} </h1>
        <h3>La base es: <strong> {{ base }} </strong></h3>


        <!--No se aconseja de que la logica la haga el template, debe de ser el componente de typeScript-->
        <button (click)="acumular(base)"> +{{base}} </button>

        <span> {{ numero }} </span>

        <button (click)="acumular(-1)"> -1 </button>

    `,
    styleUrls: ['./app.component.css']
})
//Export para utilizarlo fuera del archivo
export class ContadorComponent{
    title: string = 'Contador App';
  numero: number = 10;

  base: number = 5;

  acumular(valor: number){
    this.numero += valor;
  }
}

---------------------
//Despues de esto hay que añadirlo en app.module.ts en declarations e importarlo, la coma es importante.
declarations: [
    AppComponent,
    ContadorComponent
  ]
---------------------
//Ahora por ejemplo llamamos al componente desde app.component.html que a su vez esta llamado desde index.html, de esta manera:
<app-contador></app-contador>
**************
----------------------------Fin crear componente---------------------------

----------------------------Crear componente  de forma automatica------------------------------
//En la terminal, en la ruta ->
ng g c heroes/listado -> Es igual a ng generate component ruta

//En el compontent.ts se crea automaticamente el OnInit que es el equivalente al Oncreate:
export class ListadoComponent implements OnInit {

  constructor() { 
    console.log('constructor')
  }

  ngOnInit(): void {
    console.log('onInit')
  }

}
-----------------------------Fin Codigo Ejemplo
-----------------------------------------------------------------------------------------------

----------------------------- Directiva ngFor----------------------------------
//Es un foreach en html para incluir el contenido de un array, agregar listado automaticamente(lista automaticamente)
<ul>
 <li *ngFor="let heroe of heroes">
        {{heroe}}
 </li>
</ul>

//Se puede poner el index:
<li *ngFor="let heroe of heroes; let i = index">
        {{i}} - {{heroe}}
    </li>
-------------------------------------------------------------------------------

-------------------------------Directiva ngIf----------------------------------

//Ocultar una etiqueta hasta que se cumpla una condicion, por ejemplo si es false no aparece, si es true aparece:
<div *ngIf="false">
    <h3>Heroe Borrado</h3>
    <span>{{heroeBorrado}}</span>
    <button (click)="borrarHeroe()">Borrar</button>
</div>

//Mismo ejercicio que se aplique cuando el heroe este borrado, similar al if:
<div *ngIf= " heroeBorrado != ''">
    <h3>Heroe Borrado</h3>
    <span>{{heroeBorrado}}</span>
    <button (click)="borrarHeroe()">Borrar</button>
</div>

//Cambiar de true a false y viceversa con un (click) -> <button type="button" (click)="habilitar = (habilitar==true)? false: true" class="btn btn-primary my-3">{{habilitar==true? 'Ocultar': 'Mostrar'}}</button>
-------------------------------------------------------------------------------

---------------------------------Directiva Ng-Template y nglf-else-------------------------------------
//nglf else, para que si no cumple la condicion haga otra cosa y ng-template es la otra cosa con la referencia que se le ponga.

//Ejemplo:
<div *ngIf= "heroeBorrado != ''; else noborrado">
    <h3>Heroe Borrado</h3>
    <span>{{heroeBorrado}}</span>    
</div>

<ng-template #noborrado>
    <h3>No ha borrado nada.</h3>
</ng-template>
-------------------------------------------------------------------------------------------------------

-----------------------------Modulos-----------------------------------
//Que es un modulo, el objetivo de los modulos es ayudarnos a agrupar componentes que tienen sentido entre sí. Cargandolos solo cuando sea necesario y de esa manera liberar carga del sistema.
//Para ello:
Dentro de la carpeta que queramos agrupar modulos, boton derecho nuevo archivo heroes.module.ts	(En este ejemplo he creado el modulo heroes para agrupar los componentes de heroes dentro de la carpeta heroes).

//En archivo module.ts tenemos que importar lo necesario de un modulo, tener la clase del modulo y ponerle la declaracion NgModule necesaria. 
Dentro de esta declaracion (declarations) estan los componentes que voy a tener en el modulo.
Los exports son los que quiero hacer visibles fuera de este modulo.
Los imports contienen modulos con los tipicos paquetes que aportan funcionalidades.

//Ejemplo de modulo:
import { CommonModule } from '@angular/common';
import{ NgModule} from '@angular/core'
import { HeroeComponent } from './heroe/heroe.component';
import { ListadoComponent } from './listado/listado.component';

@NgModule({
    declarations:[
        HeroeComponent,
        ListadoComponent
    ],
    exports:[
        ListadoComponent
    ],
    imports:[
        CommonModule			
    ]
})
export class HeroesModule{}
//----Fin de ejemplo de modulo----

//Para usar el modulo, en el app.module.ts en el apartado de imports, ponemos el nombre del modulo a importar, en este caso con HeroesModule
-----------------------------------------------------------------------

--------------Reconstruir node_modules-------------------
//En la ruta del proyecto npm install y los reconstruira.
----------------------------------------------------------

---------------Generar Modulo automaticamente-------------
ng g m dbz 	//Acortado generar modulo automaticamente
----------------------------------------------------------

--------------- Form module---------------------
//No refrescar pantalla en forms
//Es una ayuda de angular para que los submit de nuestros formularios no refresquen la pantalla.

//Importamos el modulo FormsModule en el module.ts del componente
imports: [
    CommonModule,
    FormsModule
  ]

//En el form añadimos el ngSubmit vinculado al evento del ts:
	<form (ngSubmit)="agregar( )">
            <input type="text" placeholder="Nombre">
            <input type="text" placeholder="Poder">   

            <button type="submit">Agregar</button>
	</form>

//
//Evento del form con ngSubmit
  agregar(){    
    console.log('Hey');
  }

//Si sigue refrescandose al aplicar el formulario *ng serve* de nuevo en el cmd.
------------------------------------------------

-------------------ngModel--------------------
//[] en un form es para establecer alguna propiedad  y () para emitir o escuchar o eventos
//En un form con [value] podemos acceder a un objeto
<form (ngSubmit)="agregar()">
            <input type="text" placeholder="Nombre" [value]="nuevo.nombre">
            <input type="text" placeholder="Poder">   
            <button type="submit">Agregar</button>
        </form>

//Para añadir eventos a un input text (textview evento) hay dos formas, mediante javascript o mediante ngModel, 
//Mediante javascript:
En el form -> <input type="text" placeholder="Nombre" [value]="nuevo.nombre" (input)="cambiarNombre( $event )">
En el evento -> cambiarNombre(event: any){
    console.log(event.target.value);
  }

//Mediante ngModel, podemos establecer el value y el evento, nota para establecer el value mediane [ngModel] debemos dar el atributo name a el input (la correcta en angular):
<input type="text" placeholder="Nombre" name="pepe" [(ngModel)]="nuevo.nombre">	//[(ngModel)] con simplemente poner los parentesis le decimos que queremos que ponga el valor que se escriba en ese input en la propiedad que se indica, en este caso nuevo.nombre

//Comprobar campo vacio de forma estricta:
//El trim quita los espacios en blanco con esto podemos ver si esta vacio, === es igualdad estricta, compara por ejemplo a ver si es del mismo tipo tb, por si metes '10' y 10, verifica el tipo de dato y el valor y si es el mismo objeto, es decir tiene qwue ser una referencia a la misma variable
    if(this.nuevo.nombre.trim().length === 0){
      return;
    }
----------------------------------------------

-----------Agregar a un listado desde input text (textview)-------------------
//En html, añadimos la lista a li con el array que esta en ts y los eventos a los input para que cambie el objeto nuevo en el ts y el button de agregar
<li *ngFor="let personaje of personajes">
                {{personaje.nombre}} - {{personaje.poder}}
</li>

<form (ngSubmit)="agregar()">
            <input type="text" placeholder="Nombre" name="pepe" [(ngModel)]="nuevo.nombre" (input)="cambiarNombre( $event )">
            <!--<input type="text" placeholder="Nombre" [value]="nuevo.nombre" (input)="cambiarNombre( $event )">-->
            <input type="text" placeholder="Poder" name="poder" [(ngModel)]="nuevo.poder">   
            <button type="submit">Agregar</button>
</form>

//En ts tenemos un objeto y un array, con eventos modificamos las propiedades de ese objeto y al darle a agregar lo añadimos al array.
			//Objeto
					nuevo: Personaje ={
   				            nombre:'',
				    	    poder:0
					}
			//Array
				personajes: Personaje[] = [
  				 {
   		 		   nombre: 'Goku',
    				   poder: 15000
  				 },
  				 {
    				   nombre:'Vegeta',
    				   poder: 7500
  				 }
				]
			//Evento agregar
			   agregar(): void{    
				//Comprobamos que no esten los campos vacios
    				if(this.nuevo.nombre.trim().length === 0){
      					return;
    				}
				//Insertamos el objeto nuevo en el array, el cual hemos modificado al escribir en los input con ngModel
				this.personajes.push(this.nuevo)
				//Reiniciamos el objeto nuevo para que la referencia no apunte al que acabamos de insertar
				this.nuevo ={
      					nombre: '',
      					poder: 0
    				}
			   }
------------------------------------------------------------------------------


----------------------------Crear componentes hijos----------------------------
//Esta información se suele gestionar desde el main-page el cual gestiona a los hijos.
//Para ahorrar codigo, por ejemplo en el caso del modulo dbz voy a hacer un componente de la parte de crear el listado y otro del formulario para poder invocarlos cuando quiera
Creamos el componente, el cual no se exportara porque solo se utilizara cuando alguien lo imprima.
Lo creamos con 
ng g c dbz/personajes --skip-tests
//Hecho esto, en donde queremos invocarlo en el html:
<app-personajes></app-personajes>

//El html del componente hijo contiene:
<h3>Personajes</h3>
        <hr>
        <ul>
            <li>Krillin - 700</li>
            <!--Para pasar la información del personajes (que existe en el componente padre MainPageComponent)-->
            <li *ngFor="let personaje of personajes">
                {{personaje.nombre}} - {{personaje.poder | number}}
            </li>
</ul>

//Esto nos da el error de que personajes existe en el componente padre y no en el hijo, para que el hijo tenga acceso a ello debemos en el .ts del hijo:
export class PersonajesComponent {
  //Con el input le decimos a angular que personajes va a venir del componente padre
  @Input() personajes: any[] = [];
}

//Ahora debemos actualizar la utilizacion en el html que utilizabamos el componente hijo, ya que debemos indicarle que vamos a darle acceso al parametro:
<app-personajes [personajes]="personajes"></app-personajes>		//Siendo [personajes] la variable que hemos indicado en el ts hijo y "personajes" la variable del componente padre

//Podemos llamarlo de otra forma en vez de con [personajes], para ello:
@Input("data") personajes: any[] = [];		//Incluimos el 'data' en el ts del componente hijo

//Y a la hora de llamarlo en el componente que lo invocamos, cambiamos[personajes] por [data], data o como quieras llamarlo.

//Como mejora, el tipado de any en  @Input() personajes: any[] = []; no mola asi que vamos a indicarle de que tipo es, para ello:
1ºCreamos una carpeta dentro de dbz o de lo que englobe el modulo/componente y dentro un archivo dbz.interface.ts.
2º En mi caso he quitado la interfaz de donde estaba y la he copiado en el archivo recien creado, para darle acceso a todos los componentes:
export interface Personaje{
  nombre:string;
  poder: number;
}
3º Importamos la interfaz con control . donde sea necesario. -> import { Personaje } from '../interfaces/dbz.interface';
4º Ahora podemos cambiar el tipo personaje: any por personaje: Personaje en el componente hijo.ts
export class PersonajesComponent {
  @Input("data") personajes: Personaje[] = [];
}
--------------------OutPuts y EventEmitter------------****//mandar evento al padre
//Tambien en vez de hacer un input en el hijo, podemos hacer un output, el cual emitira al componente padre el cambio en donde corresponda, funciona a la inversa del input.
//EventEmitter es el tipo que le pondremos al dato que vamos a emitir, nota importante: debemos importarlo del core -> import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';		//Si no se importara de otro paquete.
1º Emitimos el personaje
  //Para emitir al componente padre, eventEmitter es un generico lo que quiere decir que puede ser cualquier cosa, para ello le indicamos e tipo que vamos a emitir
  @Output("dataNuevoPersonaje") onNuevoPersonaje: EventEmitter<Personaje> = new EventEmitter<Personaje>();
2º Lo emitimos al componente del padre:
    this.onNuevoPersonaje.emit(this.nuevo);
3º Tenemos que incluir el evento de emitir en el <app-agregar> o el que sea del componente concreto, donde el evento sera el que pongamos en el hijo al hacer el @Output:, mediante el event mandamos la variable que tiene el output como argumento
<app-agregar [datanuevo]="nuevo" (dataNuevoPersonaje)="agregarNuevoPersonaje( $event )"></app-agregar>   
5º Ponemos la funcion en el componente padre que vamos a disparar con el evento del output
 agregarNuevoPersonaje( argumento: Personaje): void{
    //Este metodo recibe un evento desde el hijo, habiendo cambiado previamente el contenido de nuevo:{} y lo inserta en el array. Recibe un personaje como argumento
    console.log('Evento desde el hijo')
    this.personajes.push(argumento)
  }

NOTA: El argumento lo estamos enviando al hacer el emit en el punto 2º.
---------------------------------------****

-------------------------------------------------------------------------------

------------------------Depurar aplicacion---------------------------------------
//Esto es ir lo de paso a paso
1º Ponemos debugger; en el codigo de visual studio en la linea que queramos parar y cuando se ejecute en consola estara parado en esa linea
//En chrome no funciona

//DESDE VISUAL STUDIO:
Pretamos f5 y al ejecutarla se para si establecemos los breakpoint en la linea que queramos con el punto rojo, 
---------------------------------------------------------------------------------

----------------------------------------Servicios-----------------------------------------------------
//Los servicios se deben utilizar para manipular la informacion y los metodos de fuentes externas
//Para crearlo.
1º Creamos la carpeta en el modulo dbz por ejemplo, llamada services y dentro el archivo dbz.service.ts
2º Creamos la clase que sera el servicio y le indicamos que esa clase sera un servicio con el decorador Injectable()

import { Injectable } from "@angular/core";

@Injectable()
export class DbzService{
    
    constructor(){
        console.log('Servicio inicializado');
    }

}

3º Hay que indicar en el modulo que este servicio existe, en concreto en el apartado de providers:[]
],exports:[
    MainPageComponent
  ],
  providers:[
    DbzService
  ]
4º Ahora deberiamos de mudar la logica necesaria del componente que requiera al servicio,

5º Usamos el constructor de la clase del servicio donde queramos usarlo haciendo una inyeccion de dependencias del servicio:
  constructor(private dbzService: DbzService){}			//Esta es la forma corta de hacer el constructor, en este caso esta en main-page.components.ts

//La idea es que pongamos el servicio en el componente que queramos que lo inicie.
//El servicio no se puede inicializar dos veces, solo se inicializa una y todos los hijos de ese servicio reciben la informacion, por lo tanto sirven para centralizar la información.
//Gracias a los servicios podemos reducir enormemente la logica de la aplicacion.

NOTA: Podemos observar si se ha inicializado el servicio en la consola del navegador en la linea inicial, ya que pone servicio inicializado.
------------------------------------------------------------------------------------------------------

-----------------------------------------Servicios centralizar el acceso a la informacion en el servicio-----------------------------------------------------------
//La manipulacion de la informacion debe manipularse dentro de los servicios y no en los componentes.
//En el main page, creamos el array de personajes vacio, y para que acceda al array que hemos mudado al servicio debemos incluir lo siguiente dentro del servicio que estabamos incluyendo en el constructor:
constructor( private dbzService: DbzService){
    this.personajes = this.dbzService.personajes
  }

//De esta manera igualamos nuestro array al que este en el servicio de DbzService

//Lo anterior en el constructor funciona pero vamos a centralizar todo lo que sea manipular la informacion en el servicio, asi que lo quitamos del componente main-page.components.ts, para ello:
1º Mediante get en la clase componente obtenemos la informacion por ejemplo en este caso del array,
get personajes(): Personaje[]{
  return this.dbzService.personajes;
}
//Esto indica que la variable personajes va a obtener un array de personajes desde el servicio.

//OTRA MANERA DE HACERLO, para ello refactorizamos lo que hemos hecho, para hacer más seguro y mejor todo.
1º La propiedad que vamos a cambiar en el servicio deberia de ser privada para que no se pueda modificar desde los componentes., el _variable es una conveccion en el nombre que indica que la variable va a ser privada.
 private _personajes: Personaje[] = [
        {
          nombre: 'Goku',
          poder: 15000
        },
        {
          nombre:'Vegeta',
          poder: 7500
        }
      ]
2º Hacemos los get en el servicio para poder acceder desde fuera, en concreto de personajes que acabamos de poner privado.
get personajes(): Personaje[]{
          //El [...] rompe la referencia con la variable, es como decir separa la referencia con la variable this. de aqui y generate una copia en donde se invoque el get. Esto no es necesario en java, es sobre todo de javascript pero por buena practica se pone.
        return [...this.personajes];
}
3º Ahora por ejemplo podemos retornar el arreglo de personajes del servidor desde otro componente, llamando al servicio y con un get en el componente:, por ejemplo desde la clase personajes.components.ts
get personajes(){
    return this.DbzService.personajes;
}

//Llamamos al servicio
constructor( private DbzService: DbzService){}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------


-------------------------------------Despliegue aplicacion-----------------------------------------------
//A la hora de hacer la app angular va a quitar muchas cosas que se utilizan para el ide.

Generar build de producción*******************
1º//Para generar la version de produccion:
ng build --prod
2º Genera un dist y este contiene la app.
3º Vamos a https://www.netlify.com/ el cual es un hosting que nos va a servir para desplegar la web de ejemplo
4º Tomamos el directorio y lo dejamos caer en la pagina web una vez logeados.
5º Conclusion necesitamos un hosting para soltar el dist.

**************************
---------------------------------------------------------------------------------------------------------

----------------------------- Truquitos -------------------------------------------
//A la hora de inyectar esto es equivalente, pero mucho más corto:
constructor(private clienteService: ClienteService) { }
	y
private clienteService:ClienteService;
  constructor( clienteService: ClienteService) {
    this.clienteService = clienteService;
  }
-----------------------------------------------------------------------------------

--------------------------------- Transformar objeto en stream ------------------------------------------------------
//Gracias a esto desde el cliente angular con el back end se notifican los cambios en el servidor sin necesidad de recargar la pagina mediante los observables.
 getClientes(): Observable<Cliente[]>{ //Convertimos nuestro listado de clientes en un Observable, para convertirlo en un stream y poder manejarlo en api rest
    return of(CLIENTES);
  }
---------------------------------------------------------------------------------------------------------------------

Lo básico es:

El .HTML te muestra por pantalla

El .TS hace la lógica que haga falta para mostrar por pantalla lo que toque

El .SERVICE.TS es el que te conecta el .TS con el Backend para hacer Post o Get o lo que sea

Una vez de aquí ya pasamos al back en java

El service.ts anterior te hace una llamada a un Endpoint que los localizamos en archivos xxxController.

El controler llama a archivos xxxProvider que llaman a archivos xxxProviderImpl que es dónde se realiza la mayor parte de lógica.

Cuando un providerImpl necesita recoger datos de la BBDD llama al archivo xxxRepository que es el que con Hibernate hace las llamadas a BBDD.

Los datos recogidos se meten en Entidades (xxxxEntity)
----------------------------------------------------------------